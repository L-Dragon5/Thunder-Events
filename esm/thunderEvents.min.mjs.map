{"version":3,"file":"thunderEvents.min.mjs","sources":["../lib/constants.js","../lib/utilities.js","../lib/state.js","../lib/exports.js","../lib/uiComponents/ProgramGuideNative/getStyles.js","../lib/uiComponents/ProgramGuideNative/componentUtils.js","../lib/uiComponents/ProgramGuideNative/renderByLocation.js","../lib/uiComponents/ProgramGuideNative/renderByTime.js","../lib/uiComponents/ProgramGuideNative/renderFavorites.js","../lib/uiComponents/ProgramGuideNative/renderSearchResults.js","../lib/uiComponents/ProgramGuideNative/index.js","../lib/uiComponents/ProgramGuideNative/renderSearchBar.js","../lib/uiComponents/ProgramGuideNative/renderSortDialog.js","../lib/uiComponents/ProgramGuideNative/renderEventDialog.js","../src/index.js"],"sourcesContent":["export const DEFAULT_FLOOR_PLAN = {\r\n  title: 'Venue',\r\n  imageSrc: '',\r\n  clickableAreas: [],\r\n}\r\n\r\nexport const DEFAULT_GUIDE = {\r\n  events: [],\r\n  floorPlan: DEFAULT_FLOOR_PLAN,\r\n}\r\n\r\nconst FAVORITES_KEY = 'FAVORITE_EVENTS'\r\n\r\nexport const DEFAULT_ADD_FAVORITE = async event => {\r\n  const favoriteEvents = JSON.parse(localStorage.getItem(FAVORITES_KEY) || '[]')\r\n  favoriteEvents.push(event)\r\n  const eventsJSON = JSON.stringify(favoriteEvents)\r\n  localStorage.setItem(FAVORITES_KEY, eventsJSON)\r\n  return favoriteEvents\r\n}\r\n\r\nexport const DEFAULT_REMOVE_FAVORITE = async event => {\r\n  const favoriteEvents = JSON.parse(localStorage.getItem(FAVORITES_KEY) || '[]')\r\n  const removeIndex = favoriteEvents.findIndex(({ location: _location, start, name }) => {\r\n    const { location: cLocation, start: cStart, name: cName } = event\r\n    return _location === cLocation && start === cStart && name === cName\r\n  })\r\n  favoriteEvents.splice(removeIndex, 1)\r\n  const eventsJSON = JSON.stringify(favoriteEvents)\r\n  localStorage.setItem(FAVORITES_KEY, eventsJSON)\r\n  return favoriteEvents\r\n}\r\n\r\nexport const DEFAULT_GET_FAVORITES = async () => {\r\n  const favoriteEvents = JSON.parse(localStorage.getItem(FAVORITES_KEY) || '[]')\r\n  return favoriteEvents\r\n}\r\n\r\nexport const DEFAULT_FETCH_DATA = () => Promise.resolve({\r\n  guide: DEFAULT_GUIDE,\r\n  addFavorite: DEFAULT_ADD_FAVORITE,\r\n  getFavorites: DEFAULT_GET_FAVORITES,\r\n})\r\n\r\nconst NOW = Date.now() // date in milliseconds\r\n\r\nconst HOUR = 1000 * 60 * 60 // milliseconds * seconds * minutes\r\n\r\nexport const DEFAULT_EVENT = {\r\n  start: NOW,\r\n  end: NOW + HOUR,\r\n  location: '(none)',\r\n  name: '(none)',\r\n  description: '(no description)',\r\n}\r\n\r\nexport const DEFAULT_CLICKABLE_AREA = {\r\n  shape: 'rect',\r\n  coords: [],\r\n  href: '#',\r\n  alt: '',\r\n}\r\n\r\nexport const DEFAULT_TIMES = {\r\n  days: [],\r\n  interval: 60,\r\n}\r\n\r\nexport const DEFAULT_BREAKPOINT = '50em'\r\n\r\nexport const NOOP = () => {}\r\n","import { NOOP } from './constants'\r\n\r\nexport const getType = val => {\r\n  if (val === null) return 'null'\r\n  if (typeof val === 'object') return val.constructor.name.toLowerCase()\r\n  return typeof val\r\n}\r\n\r\nexport const checkType = (val, type) => {\r\n  const validString = getType(type) === 'string'\r\n  const validArray = getType(type) === 'array' && type.every(t => getType(t) === 'string')\r\n  if (!validString && !validArray) throw '`checkType()` expects either a string or array of strings in the second argument'\r\n  if (validString) return getType(val) === type\r\n  if (validArray) return type.some(t => getType(val) === t)\r\n}\r\n\r\nexport const isObject = obj => checkType(obj, 'object')\r\n\r\nexport const isEmpty = val => checkType(val, ['undefined', 'null'])\r\n\r\nexport const contains = (val, search) => {\r\n  const valIsString = checkType(val, 'string')\r\n  const valIsArray = checkType(val, 'array') && val.every(t => checkType(t, 'string'))\r\n  const validSearch = checkType(search, ['string', 'regexp'])\r\n  if (!valIsArray && !valIsString) throw '`contains()` expects either a string or array of strings in the first argument'\r\n  if (!validSearch) throw '`contains()` expects either a string or regular expression in the second argument'\r\n  if (valIsArray) return val.some(v => v.search(search) !== -1)\r\n  if (valIsString) return val.search(search) !== -1\r\n}\r\n\r\n/**\r\n * Returns a function which gets a field from a given object, unless it's empty,\r\n * in which case it gets that same field from a fallback object.\r\n * @param {object} fallbackObj - The object to be referenced when a field is empty on the original object.\r\n * @param {function} onFallback - An optional callback to run when the fallback is used.\r\n * @param {object} _altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to get the value from a provided key.\r\n */\r\nexport const useFallback = (fallbackObj, onFallback = NOOP, _altTypes = {}) => {\r\n  if (!isObject(fallbackObj)) throw '`useFallback()` expects an object in the first argument'\r\n  if (!checkType(onFallback, 'function')) throw '`useFallback()` expects a function in the second argument'\r\n  if (!isObject(_altTypes)) throw '`useFallback()` expects an object in the third argument'\r\n  return (obj, key) => {\r\n    const fallbackValue = fallbackObj[key]\r\n    const valid = isObject(obj)\r\n    const value = valid ? obj[key] : null\r\n    const empty = isEmpty(value)\r\n    const type = getType(value)\r\n    const altTypes = _altTypes[key]\r\n    const altTypesArr = checkType(altTypes, 'array') ? altTypes : (checkType(altTypes, 'string') ? [altTypes] : [])\r\n    const mismatch = type !== getType(fallbackValue) && !altTypesArr.some(t => t === type)\r\n    if (!valid || empty || mismatch) {\r\n      const status = !valid ? 'invalid' : (empty ? 'empty' : 'mismatch')\r\n      onFallback(status, key)\r\n      return fallbackValue\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a function which casts any value to the same structure as the provided object (the type).\r\n * @param {object} type - An object which serves as the (shallow) structure constraints.\r\n * @param {string} name - The optional name of the type for logging purposes.\r\n * @param {object} altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to cast a provided value to the given type.\r\n */\r\nexport const useCast = (type, name = 'object', altTypes = {}) => {\r\n  if (!isObject(type)) throw 'You may only cast to custom object types'\r\n  return obj => {\r\n    if (!isObject(obj)) return type\r\n    const getValue = useFallback(type, (status, key) => {\r\n      if (status === 'invalid') console.warn(`The provided ${name} is not a valid object.`)\r\n      else if (status === 'mismatch') console.warn(`The \\`${key}\\` field expected type \\`${getType(type[key])}\\` but got \\`${getType(obj[key])}\\`.`)\r\n      else if (status === 'empty') console.warn(`The provided ${name} did not have the \\`${key}\\` field.`)\r\n    }, altTypes)\r\n    return Object.keys(type).reduce((castObj, key) => {\r\n      castObj[key] = getValue(obj, key)\r\n      return castObj\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport const checkFilterType = (filter = {}) => {\r\n  if ('after' in filter && !checkType(filter.after, ['number', 'date'])) throw 'The `after` field expects a number or date'\r\n  if ('before' in filter && !checkType(filter.before, ['number', 'date'])) throw 'The `before` field expects a number or date'\r\n  if ('locations' in filter && !checkType(filter.locations, 'array')) throw 'The `locations` field expects an array'\r\n  if ('search' in filter && !checkType(filter.search, ['string', 'regexp'])) throw 'The `search` field expects a string or regular expression'\r\n  return true // indicate success\r\n}\r\n\r\n/**\r\n * This is the most efficient way to clear HTML, much faster than innerHTML.\r\n * @param {HTMLElement} element - the DOM element we want to empty\r\n */\r\nexport const clearHTML = element => {\r\n  let i = element.childNodes.length\r\n  while (i--) { element.removeChild(element.lastChild) }\r\n}\r\n\r\n/**\r\n * This helps us avoid trailing commas when mapping template literals.\r\n * @param {Array} arr - the array to iterate\r\n * @param {function} callback - the callback for each iteration; should return a string or stringifiable value\r\n */\r\nexport const mapString = (arr, callback) => arr.map(callback).join('')\r\n\r\n/**\r\n * Rounds a date to the nearest given minute\r\n * @param {Date|number|string} _date - The date to round (or anything that can be parsed as a date)\r\n * @param {number} nearestMinute - The nearest minute to round to (15 by default)\r\n */\r\nexport const roundMinutes = (_date, nearestMinute = 15) => {\r\n  const date = new Date(_date)\r\n  const roundedMinutes = Math.round(date.getMinutes() / nearestMinute) * nearestMinute\r\n  date.setMinutes(roundedMinutes)\r\n  return date\r\n}\r\n\r\nexport const WholeNumber = num => Number(num.toFixed())\r\n\r\n/**\r\n * Gets the name of the day based on the index (typically returned by `date.getDay()`)\r\n * @param {number} idx - The index of the day of the week\r\n * @param {boolean} short - Whether to abbreviate the day names or not\r\n * @returns {string} - The name of the day of the week\r\n */\r\nexport const getDay = (idx, short = false) => {\r\n  const days = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n  ]\r\n  const shortDays = [\r\n    'Sun',\r\n    'Mon',\r\n    'Tues',\r\n    'Wed',\r\n    'Thurs',\r\n    'Fri',\r\n    'Sat',\r\n  ]\r\n  return short ? shortDays[idx] : days[idx]\r\n}\r\n\r\nexport const getDateInfo = date => ({\r\n  time: date.toLocaleTimeString('en-US', { timeStyle: 'short' }),\r\n  day: getDay(date.getDay()),\r\n  date: date.toLocaleDateString(),\r\n})\r\n\r\n/**\r\n * Generates a string representing javascript, which can be used in the\r\n * HTML templates of native web components.\r\n * \r\n * EXAMPLE:\r\n * ```js\r\n *   const open = true\r\n *   const html = `<button onclick=\"this.getRootNode().host.openDialog(${open})\">Click me</button>`\r\n * ```\r\n * \r\n * versus\r\n * \r\n * ```js\r\n *   const open = true\r\n *   const html = `<button onclick=\"${runMethod('openDialog', open)}\">Click me</button>`\r\n * ```\r\n * \r\n * @param {string} name - The name of the component method to run\r\n * @param {...*} args - The arguments to be used in the function call (objects will be converted to JSON and encoded as a URI component)\r\n * @returns {string} - A string representing JavaScript code\r\n */\r\nexport const runMethod = (name, ...args) => `this.getRootNode().host.${name}(${args.length ? `\r\n  ${[...args].map(a => getType(a) === 'object'\r\n    ? `\\`${encodeURIComponent(JSON.stringify(a))}\\`` // stringify objects to avoid [object Object] and encode to avoid double quote conflicts\r\n    : (getType(a) === 'string' ? `\\`${a}\\`` : String(a)) ) // wrap strings in quotes and send all other types without quotes\r\n  }\r\n` : 'event'})`\r\n\r\nexport const getEventId = ({ location, name, start: _start }) => {\r\n  const snip = s => s.replace(/[^a-zA-Z0-9]/g, '')\r\n  const date = new Date(_start)\r\n  const start = `${date.toLocaleDateString()}-${date.toLocaleTimeString()}`\r\n  return `${snip(location)}-${snip(name)}-${snip(start)}`\r\n}\r\n\r\nexport const search = (_input, _text) => {\r\n  const formatForSimilarMatch = str => str\r\n    ?.normalize('NFD')\r\n    .replace(/\\p{Diacritic}/gu, '')\r\n    .replace(/[^a-zA-Z0-9]/g, '')\r\n    .toLowerCase()\r\n\r\n  // first try matching the entire query\r\n  const input = formatForSimilarMatch(_input)\r\n  const text = formatForSimilarMatch(_text)\r\n  if (text.search(input) !== -1) return true\r\n\r\n  // if that fails, try each word\r\n  return _input.split(/\\s+/g).some(input =>\r\n    text.search(formatForSimilarMatch(input)) !== -1)\r\n}\r\n","import { DEFAULT_ADD_FAVORITE, DEFAULT_REMOVE_FAVORITE, DEFAULT_GET_FAVORITES, DEFAULT_GUIDE } from './constants'\r\nimport { checkType, roundMinutes, getDay } from './utilities'\r\n\r\nexport const state = {\r\n\r\n  // utilities for synchronous actions after loading state\r\n  _hasFetched: false,\r\n  get hasFetched() { return this._hasFetched },\r\n  set hasFetched(bool) {\r\n    this._hasFetched = bool\r\n    if (bool === false) return false\r\n    this.fetchQueue.forEach(resolve => resolve())\r\n    return true\r\n  },\r\n  fetchQueue: [],\r\n  waitForFetch() {\r\n    return new Promise(resolve => {\r\n      if (this.hasFetched) resolve()\r\n      else this.fetchQueue.push(resolve)\r\n    })\r\n  },\r\n\r\n  // default guide\r\n  guide: DEFAULT_GUIDE,\r\n\r\n  // default favorite functionality\r\n  addFavorite: DEFAULT_ADD_FAVORITE,\r\n  removeFavorite: DEFAULT_REMOVE_FAVORITE,\r\n  getFavorites: DEFAULT_GET_FAVORITES,\r\n\r\n  // get locations from events dynamically\r\n  get locations() {\r\n    const events = this.guide?.events || []\r\n    return [...events.reduce((locations, event) => {\r\n      if (!checkType(event, 'object')) return locations\r\n      if (!checkType(event.location, 'string')) return locations\r\n      locations.add(event.location)\r\n      return locations\r\n    }, new Set())]\r\n  },\r\n\r\n  // get times from events dynamically\r\n  get times() {\r\n    const events = this.guide?.events || []\r\n    const allTimes = [...events.reduce((times, event) => {\r\n      if (!checkType(event, 'object')) return times\r\n      if (!checkType(event.start, ['number', 'date'])) return times\r\n      if (!checkType(event.end, ['number', 'date'])) return times\r\n      times.add(roundMinutes(event.start))\r\n      times.add(roundMinutes(event.end))\r\n      return times\r\n    }, new Set())]\r\n    const earliestTime = new Date(Math.min(...allTimes))\r\n    const latestTime = new Date(Math.max(...allTimes))\r\n    const interval = allTimes.reduce((interval, date) => {\r\n      if (interval !== 15) {\r\n        const minutes = date.getMinutes()\r\n        if (minutes === 30) interval = 30\r\n        if (minutes === 15 || minutes === 45) interval = 15\r\n      }\r\n      return interval\r\n    }, 0)\r\n    const getTimeObject = date => ({\r\n      date,\r\n      timeString: date.toLocaleTimeString('en-US', { timeStyle: 'short' }),\r\n    })\r\n    const getFullDay = time => `${getDay(time.getDay())} ${time.toLocaleDateString()}`\r\n    let days = { [getFullDay(earliestTime)]: [getTimeObject(earliestTime)] }\r\n    let prevTime = earliestTime\r\n    while (prevTime < latestTime) {\r\n      const lastTimeInDay = Math.max(...allTimes.filter(t => t.getDate() === prevTime.getDate()))\r\n      let currentTime = null\r\n      if (lastTimeInDay === Number(prevTime)) {\r\n        currentTime = new Date(allTimes.find(time => time > prevTime))\r\n        days[getFullDay(currentTime)] = [getTimeObject(currentTime)]\r\n      } else {\r\n        currentTime = new Date(prevTime)\r\n        currentTime.setMinutes(currentTime.getMinutes() + interval)\r\n        days[getFullDay(currentTime)].push(getTimeObject(currentTime))\r\n      }\r\n      prevTime = currentTime\r\n    }\r\n    return {\r\n      days,\r\n      interval,\r\n    }\r\n  },\r\n}\r\n","import {\r\n  DEFAULT_FETCH_DATA,\r\n  DEFAULT_EVENT,\r\n  DEFAULT_FLOOR_PLAN,\r\n  DEFAULT_CLICKABLE_AREA,\r\n} from './constants'\r\nimport {\r\n  useCast,\r\n  checkType,\r\n  checkFilterType,\r\n  isObject,\r\n} from './utilities'\r\nimport { state } from './state'\r\n\r\nconst init = async (init = DEFAULT_FETCH_DATA) => {\r\n  const data = await init()\r\n  const { guide } = data\r\n  if (!isObject(data)) throw '`init()` must return an object'\r\n  if (!isObject(guide)) throw 'The `guide` field expects an object'\r\n  if ('events' in guide) {\r\n    if (!checkType(guide.events, 'array')) throw 'The `guide.events` field expects an array'\r\n    const castEvent = useCast(DEFAULT_EVENT, 'event', { start: 'date', end: 'date' })\r\n    state.guide.events = guide.events.map(castEvent)\r\n  }\r\n  if ('floorPlan' in guide) {\r\n    if (!isObject(guide.floorPlan)) throw 'The `guide.floorPlan` field expects an object'\r\n    const castFloorPlan = useCast(DEFAULT_FLOOR_PLAN, 'floor plan')\r\n    const castClickableArea = useCast(DEFAULT_CLICKABLE_AREA, 'clickable area')\r\n    const floorPlan = castFloorPlan(guide.floorPlan)\r\n    state.guide.floorPlan = {\r\n      ...floorPlan,\r\n      clickableAreas: floorPlan.clickableAreas.map(castClickableArea),\r\n    }\r\n  }\r\n  if ('addFavorite' in data) {\r\n    if (!checkType(data.addFavorite, 'function')) throw 'The `addFavorite` field expects a function'\r\n    state.addFavorite = data.addFavorite\r\n  }\r\n  if ('removeFavorite' in data) {\r\n    if (!checkType(data.removeFavorite, 'function')) throw 'The `removeFavorite` field expects a function'\r\n    state.removeFavorite = data.removeFavorite\r\n  }\r\n  if ('getFavorites' in data) {\r\n    if (!checkType(data.getFavorites, 'function')) throw 'The `getFavorites` field expects a function'\r\n    state.getFavorites = data.getFavorites\r\n  }\r\n  state.hasFetched = true\r\n}\r\n\r\nconst getEvents = async (_filters = {}) => {\r\n  await state.waitForFetch()\r\n  if (!isObject(_filters)) throw '`getEvents()` expects an object in the first argument'\r\n  const { include: _include = {}, exclude: _exclude = {} } = _filters\r\n  checkFilterType(_include) // throws if invalid\r\n  checkFilterType(_exclude) // throws if invalid\r\n  const filters = {\r\n    ..._filters,\r\n    include: {\r\n      ..._include,\r\n      after: _include.after ? Number(_include.after) : 0,\r\n      before: _include.before ? Number(_include.before) : Infinity,\r\n    },\r\n    exclude: {\r\n      ..._exclude,\r\n      after: _exclude.after ? Number(_exclude.after) : Infinity,\r\n      before: _exclude.before ? Number(_exclude.before) : 0,\r\n    },\r\n  }\r\n  const { include = {}, exclude = {} } = filters\r\n  return state.guide.events.filter(event => {\r\n    \r\n    // filter within time range\r\n    if (event.start < include.after) return false\r\n    if (event.start > exclude.after) return false\r\n    if (event.end > include.before) return false\r\n    if (event.end < exclude.before) return false\r\n    \r\n    // filter by location\r\n    if ('locations' in include && !contains(include.locations, event.location)) return false\r\n    if ('locations' in exclude && contains(exclude.locations, event.location)) return false\r\n    \r\n    // filter by name\r\n    if ('search' in include && !contains(event.name, include.search)) return false\r\n    if ('search' in exclude && contains(event.name, exclude.search)) return false\r\n\r\n    // if all previous checks pass, keep this event in the array\r\n    return true\r\n  })\r\n}\r\n\r\nconst getLocations = async () => {\r\n  await state.waitForFetch()\r\n  return state.locations\r\n}\r\n\r\nconst getTimes = async () => {\r\n  await state.waitForFetch()\r\n  return state.times\r\n}\r\n\r\nconst getFloorPlan = async () => {\r\n  await waitForFetch()\r\n  return state.guide.floorPlan\r\n}\r\n\r\nconst addFavorite = async event => {\r\n  const favorites = await state.addFavorite(event)\r\n  return favorites\r\n}\r\n\r\nconst removeFavorite = async event => {\r\n  const favorites = await state.removeFavorite(event)\r\n  return favorites\r\n}\r\n\r\nconst getFavorites = async () => {\r\n  const favorites = await state.getFavorites()\r\n  return favorites\r\n}\r\n\r\nexport {\r\n  init,\r\n  addFavorite,\r\n  removeFavorite,\r\n  getFavorites,\r\n  getEvents,\r\n  getLocations,\r\n  getTimes,\r\n  getFloorPlan,\r\n}\r\n","export const getStyles = breakpoint => /* css */`\r\n  :host,\r\n  :before,\r\n  :after {\r\n    --font: inherit;\r\n    --font-cell: var(--font);\r\n    --font-header: var(--font);\r\n    --font-column-header: var(--font-header);\r\n    --font-row-header: var(--font-header);\r\n    --padding-cell: 1rem 2rem;\r\n    --padding-header: var(--padding-cell);\r\n    --padding-column-header: var(--padding-header);\r\n    --padding-row-header: var(--padding-header);\r\n    --color-background: midnightblue;\r\n    --color-cell: lightsteelblue;\r\n    --color-cell-empty: transparent;\r\n    --color-cell-content: black;\r\n    --color-header: steelblue;\r\n    --color-header-content: white;\r\n    --color-column-header: var(--color-header);\r\n    --color-column-header-content: var(--color-header-content);\r\n    --color-row-header: var(--color-header);\r\n    --color-row-header-content: var(--color-header-content);\r\n    --color-corner: var(--color-header);\r\n    --color-corner-content: var(--color-header-content);\r\n  }\r\n  .pg-table-wrapper {\r\n    overflow: auto;\r\n    max-width: 100%;\r\n    margin-bottom: 1rem;\r\n    position: relative;\r\n  }\r\n  .pg-table {\r\n    background-color: var(--color-background);\r\n    width: 100%;\r\n  }\r\n  .pg-cell-wrapper {\r\n    background-color: var(--color-cell);\r\n    font: var(--font-cell);\r\n    padding: var(--padding-cell);\r\n    position: relative;\r\n    text-align: center;\r\n  }\r\n  .pg-cell-wrapper--overflow:before {\r\n    content: '\\\\2039';\r\n    font-size: 2.5rem;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n    line-height: 2.5rem;\r\n  }\r\n  .pg-cell-wrapper--corner {\r\n    background-color: var(--color-corner);\r\n    color: var(--color-corner-content);\r\n    cursor: pointer;\r\n    width: 10em; /* columns size to the minimum width */\r\n  }\r\n  .pg-cell-wrapper--row-header {\r\n    background-color: var(--color-row-header);\r\n    color: var(--color-row-header-content);\r\n    font: var(--font-row-header);\r\n    padding: var(--padding-row-header);\r\n    text-align: right;\r\n  }\r\n  .pg-cell-wrapper--row-header,\r\n  .pg-cell-wrapper--corner {\r\n    border-right: 0.1rem solid var(--color-background);\r\n    left: 0;\r\n    position: sticky;\r\n    z-index: 1;\r\n  }\r\n  .pg-cell--data {\r\n    position: sticky;\r\n    left: 10em;\r\n    margin: auto;\r\n    width: fit-content;\r\n    z-index: 0;\r\n  }\r\n  .pg-cell--data-favorite {\r\n    left: 0;\r\n    margin: auto;\r\n  }\r\n  .pg-cell--corner {\r\n    align-items: center;\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    grid-template-columns: auto auto;\r\n    justify-content: center;\r\n  }\r\n  .pg-cell-wrapper--column-header {\r\n    background-color: var(--color-column-header);\r\n    color: var(--color-column-header-content);\r\n    font: var(--font-column-header);\r\n    padding: var(--padding-column-header);\r\n  }\r\n  .pg-cell--column-header {\r\n    align-items: center;\r\n    display: flex;\r\n    gap: 1em;\r\n    justify-content: center;\r\n    min-width: 8em;\r\n  }\r\n  .pg-cell-wrapper--data {\r\n    cursor: pointer;\r\n  }\r\n  .pg-cell-wrapper--data-empty {\r\n    background-color: var(--color-cell-empty);\r\n  }\r\n  .pg-loading {\r\n    --color-loading-primary: steelblue;\r\n    --color-loading-secondary: white;\r\n    --size-loader: 5rem;\r\n    height: 10rem;\r\n    width: 100%;\r\n    position: relative;\r\n    z-index: 1;\r\n  }\r\n  .pg-loading:before,\r\n  .pg-loading:after {\r\n    bottom: 0;\r\n    border-radius: 50%;\r\n    content: '';\r\n    display: block;\r\n    left: 0;\r\n    margin: auto;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 2;\r\n  }\r\n  @keyframes spin {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(359deg); }\r\n  }\r\n  .pg-loading:before {\r\n    animation: spin 1s linear infinite;\r\n    background-image: conic-gradient(var(--color-loading-primary), var(--color-loading-secondary));\r\n    border: 0.4rem solid var(--color-loading-primary);\r\n    height: var(--size-loader);\r\n    width: var(--size-loader);\r\n    z-index: 1;\r\n  }\r\n  .pg-loading:after {\r\n    background-color: var(--color-loading-primary);\r\n    border: 0 solid;\r\n    height: calc(var(--size-loader) - 1rem);\r\n    width: calc(var(--size-loader) - 1rem);\r\n    z-index: 2;\r\n  }\r\n  .pg-favorite-icon {\r\n    font-size: 2rem;\r\n    font-style: normal;\r\n    line-height: 2rem;\r\n  }\r\n  .pg-more-icon {\r\n    background-color: var(--color-header);\r\n    border: 0.5em solid var(--color-header-content);\r\n    display: block;\r\n    position: relative;\r\n    vertical-align: middle;\r\n    z-index: 0;\r\n  }\r\n  .pg-more-icon,\r\n  .pg-more-icon:before,\r\n  .pg-more-icon:after {\r\n    border-radius: 50%;\r\n    height: 0.25em;\r\n    width: 0.25em;\r\n  }\r\n  .pg-more-icon:before,\r\n  .pg-more-icon:after {\r\n    background-color: var(--color-header);\r\n    border: 0 solid;\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    z-index: 1;\r\n  }\r\n  .pg-more-icon:before {\r\n    left: -0.3em;\r\n  }\r\n  .pg-more-icon:after {\r\n    right: -0.3em;\r\n  }\r\n  .pg-dialog {\r\n    background-color: var(--color-header);\r\n    bottom: 0;\r\n    border: 0 solid;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.5);\r\n    box-sizing: border-box;\r\n    color: var(--color-header-content);\r\n    height: max-content;\r\n    left: 0;\r\n    margin: auto;\r\n    max-height: 100vh;\r\n    max-width: 40em;\r\n    min-height: 40em;\r\n    position: fixed;\r\n    right: 0;\r\n    top: 0;\r\n    width: calc(100% - 0.5rem);\r\n    z-index: 2;\r\n  }\r\n  .pg-dialog-header {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n  }\r\n  .pg-dialog-title {\r\n    margin: 0;\r\n  }\r\n  .pg-dialog-select {\r\n    border: 0 solid;\r\n    border-radius: 0.3rem;\r\n    padding: 0.5rem;\r\n  }\r\n  .pg-dialog-close {\r\n    background-color: var(--color-header-content);\r\n    border: 0 solid;\r\n    border-radius: 50%;\r\n    color: var(--color-header);\r\n    cursor: pointer;\r\n    font-size: 1.6rem;\r\n    height: 2rem;\r\n    width: 2rem;\r\n  }\r\n  .pg-dialog-menu {\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    margin: 0 auto;\r\n    max-width: 20rem;\r\n    padding: 2rem 2rem 0;\r\n  }\r\n  .pg-dialog-menu-title {\r\n    width: max-content;\r\n    margin: 0 auto;\r\n  }\r\n  .pg-dialog-menu-item {\r\n    align-items: center;\r\n    background-color: var(--color-cell);\r\n    border: none;\r\n    box-shadow: 0 0 1.2rem rgba(0, 0, 0, 0.5);\r\n    color: var(--color-cell-content);\r\n    cursor: pointer;\r\n    display: flex;\r\n    gap: 0.5rem;\r\n    justify-content: center;\r\n    padding: 1rem 0.5rem;\r\n  }\r\n  .pg-dialog-menu-item--input,\r\n  .pg-dialog-menu-input {\r\n    cursor: text;\r\n  }\r\n  .pg-dialog-menu-input {\r\n    background-color: transparent;\r\n    border: none;\r\n  }\r\n  .pg-dialog-menu-special-item {\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    grid-template-columns: 2fr 1fr;\r\n  }\r\n  .pg-dialog-body {\r\n    display: grid;\r\n    grid-auto-rows: auto;\r\n    grid-template-rows: auto minmax(0, 1fr);\r\n    height: 100%;\r\n    max-height: calc(100vh - 2em);\r\n    min-height: 38em;\r\n    position: relative;\r\n  }\r\n  .pg-dialog-body:before,\r\n  .pg-dialog-body:after {\r\n    content: '\\\\02771';\r\n    color: var(--color-header);\r\n    display: inline-block;\r\n    font-size: 3rem;\r\n    height: 3rem;\r\n    left: 0;\r\n    line-height: 3rem;\r\n    margin: auto;\r\n    position: absolute;\r\n    right: 0;\r\n    width: 3rem;\r\n  }\r\n  .pg-dialog-body:before {\r\n    top: 0.2rem;\r\n    transform: rotate(-90deg);\r\n  }\r\n  .pg-dialog-body:after {\r\n    bottom: -1.8rem;\r\n    transform: rotate(90deg);\r\n  }\r\n  .pg-dialog-content {\r\n    overflow: auto;\r\n    padding-bottom: 2rem;\r\n  }\r\n  .pg-dialog-content--text-container,\r\n  .pg-dialog-footer {\r\n    background-color: var(--color-cell);\r\n    border: 0 solid;\r\n    border-radius: 0.5rem;\r\n    color: var(--color-cell-content);\r\n    margin: 2rem 0 0;\r\n    text-align: center;\r\n  }\r\n  .pg-dialog-content--text-container:after {\r\n    background-image: linear-gradient(transparent, var(--color-cell));\r\n    bottom: 0;\r\n    content: '';\r\n    display: block;\r\n    height: 4rem;\r\n    left: 0;\r\n    position: sticky;\r\n    width: 100%;\r\n  }\r\n  .pg-dialog-paragraph {\r\n    margin: 0;\r\n    padding: 1rem;\r\n  }\r\n  .pg-time {\r\n    display: inline-block;\r\n    font-weight: bold;\r\n  }\r\n  .pg-dialog-footer {\r\n    padding: 1rem;\r\n  }\r\n  @media (max-width: ${breakpoint}) {\r\n    .pg-cell-wrapper--column-header,\r\n    .pg-cell-wrapper--data,\r\n    .pg-cell-wrapper--data-empty {\r\n      display: none;\r\n    }\r\n    .pg-cell-wrapper--column-header-active,\r\n    .pg-cell-wrapper--data-active,\r\n    .pg-cell-wrapper--data-favorite,\r\n    .pg-cell-wrapper--data-empty-active {\r\n      display: revert;\r\n      min-width: none;\r\n    }\r\n    .pg-cell--data {\r\n      margin: 0;\r\n    }\r\n    .pg-cell--data-favorite {\r\n      margin: auto;\r\n    }\r\n  }\r\n`\r\n","import { WholeNumber } from '../../utilities'\r\n\r\n// converts dates to actual `Date()` objects\r\nexport const getActiveEvent = event => ({\r\n  ...event,\r\n  start: new Date(event.start),\r\n  end: new Date(event.end),\r\n})\r\n\r\n\r\n// gets all data needed for one cell, so the logic doesn't clutter the template\r\nexport const getCellData = ({ events, spanState, date, interval, _location, sortBy, currentTime }) => {\r\n\r\n  // find an event starting at this time\r\n  const _event = events.find(e =>\r\n    Number(e.start) === Number(date)\r\n    && e.location === _location\r\n  )\r\n\r\n  // handle events that already started before the start time\r\n  const event = !_event\r\n    ? events.find(e =>\r\n        Number(e.end) > Number(date)\r\n        && Number(e.start) < Number(currentTime)\r\n        && e.location === _location\r\n      )\r\n    : _event\r\n\r\n  const hasStarted = event ? event.start < currentTime : false\r\n  const eventName = event ? event.name : ''\r\n  const cellType = event ? 'data' : 'data-empty'\r\n  const getStart = event => hasStarted ? currentTime : event.start\r\n  const duration = event ? WholeNumber((event.end - getStart(event)) / 1000 / 60) : 0\r\n  const span = duration ? WholeNumber(duration / interval) : 1\r\n  const blank = sortBy === 'location' ? spanState[_location] > 0 : spanState[_location] > 1\r\n\r\n  // handle spanState to prevent extra columns\r\n  if (blank) --spanState[_location]\r\n  else if (span > 1) spanState[_location] = span\r\n\r\n  // return all necessary information included in the template\r\n  return { eventName, cellType, span, blank, event, hasStarted }\r\n}\r\n","import { DEFAULT_TIMES } from '../../constants'\r\nimport { getEventId, mapString, runMethod } from '../../utilities'\r\nimport { getCellData } from './componentUtils'\r\n\r\nconst renderByLocation = ({ activeLocation, events, times: allTimes, locations, sortBy, activeDay }) => {\r\n\r\n  const { days, interval } = allTimes || DEFAULT_TIMES\r\n\r\n  // this keeps rowspans from previous iterations in memory\r\n  // so we can avoid adding extra table cells.\r\n  const spanState = {}\r\n\r\n  // utility to check if the given location is active and return the class accordingly\r\n  const getActiveClass = (_location, className) => activeLocation === _location ? className : ''\r\n\r\n  // get all the times in the current day\r\n  const times = days[activeDay]\r\n\r\n  return /* html */`\r\n    <div class=\"pg-table-wrapper\">\r\n      <table class=\"pg-table\">\r\n        <thead class=\"pg-header\">\r\n          <tr class=\"pg-row\">\r\n            <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n              <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> ${activeDay}</div>\r\n            </td>\r\n            ${mapString(locations, _location => /* html */`\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--column-header ${getActiveClass(_location, 'pg-cell-wrapper--column-header-active')}\">\r\n                <div class=\"pg-cell pg-cell--column-header ${getActiveClass(_location, 'pg-cell--column-header-active')}\">${_location}</div>\r\n              </th>\r\n            `)}\r\n          </tr>\r\n        </thead>\r\n        <tbody class=\"pg-body\">\r\n          ${mapString(times, ({ date, timeString }) => /* html */`\r\n            <tr class=\"pg-row\">\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--row-header\">\r\n                <div class=\"pg-cell pg-cell--row-header\">${timeString}</div>\r\n              </th>\r\n              ${mapString(locations, _location => {\r\n                const { eventName, cellType, span, blank, event } = getCellData({ events, spanState, date, interval, _location, sortBy })\r\n                if (blank) return '' // blank if cell from previous row occupies this space\r\n                return /* html */`\r\n                  <td\r\n                    class=\"pg-cell-wrapper pg-cell-wrapper--${cellType} ${getActiveClass(_location, `pg-cell-wrapper--${cellType}-active`)}\"\r\n                    rowspan=\"${span}\"\r\n                    id=\"${event ? getEventId(event) : ''}\"\r\n                    ${event ? `onclick=\"${runMethod('openEventDialog', event)}\"` : ''}\r\n                  >\r\n                    <div class=\"pg-cell pg-cell--${cellType} ${getActiveClass(_location, `pg-cell--${cellType}-active`)}\">${eventName}</div>\r\n                  </td>\r\n                `\r\n              })}\r\n            </tr>\r\n          `)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  `\r\n}\r\n\r\nexport default renderByLocation\r\n","import { DEFAULT_TIMES } from '../../constants'\r\nimport { getDateInfo, getEventId, mapString, roundMinutes, runMethod } from '../../utilities'\r\nimport { getCellData } from './componentUtils'\r\n\r\nconst renderByTime = ({ events, times: allTimes, locations, sortBy, activeTime, activeDay }) => {\r\n\r\n  const { days, interval } = allTimes || DEFAULT_TIMES\r\n\r\n  // this keeps colspans from previous iterations in memory\r\n  // so we can avoid adding extra table cells.\r\n  const spanState = {}\r\n\r\n  // determine how to filter times\r\n  const _times = days[activeDay]\r\n  const now = roundMinutes(Date.now(), interval)\r\n  const { day: nowDay, date: nowDate, time: nowTime } = getDateInfo(now)\r\n  const filterMap = {\r\n    now: _times.filter(({ date }) => date >= now),\r\n    nowOnly: _times.filter(({ date }) => date === now),\r\n    time: _times.filter(({ date }) => date >= activeTime),\r\n    allTime: _times,\r\n  }\r\n  const filteredTimes = filterMap[sortBy]\r\n  const times = filteredTimes.length ? filteredTimes : [{ date: now, timeString: nowTime }]\r\n  const currentDay = filteredTimes.length ? activeDay : `${nowDay} ${nowDate}`\r\n  const timeMap = {\r\n    now,\r\n    nowOnly: now,\r\n    time: activeTime,\r\n    allTime: new Date(0),\r\n  }\r\n  const currentTime = timeMap[sortBy]\r\n\r\n  return /* html */`\r\n    <div class=\"pg-table-wrapper\">\r\n      <table class=\"pg-table\">\r\n        <thead class=\"pg-header\">\r\n          <tr class=\"pg-row\">\r\n            <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n              <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> ${currentDay}</div>\r\n            </td>\r\n            ${mapString(times, ({ timeString }) => /* html */`\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--column-header pg-cell-wrapper--column-header-active\">\r\n                <div class=\"pg-cell pg-cell--column-header pg-cell--column-header-active\">${timeString}</div>\r\n              </th>\r\n            `)}\r\n          </tr>\r\n        </thead>\r\n        <tbody class=\"pg-body\">\r\n          ${mapString(locations, _location => /* html */`\r\n            <tr class=\"pg-row\">\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--row-header\">\r\n                <div class=\"pg-cell pg-cell--row-header\">${_location}</div>\r\n              </th>\r\n              ${mapString(times, ({ date }) => {\r\n                const { eventName, cellType, span, blank, event, hasStarted } = getCellData({ events, spanState, date, interval, _location, sortBy, currentTime })\r\n                if (blank) return '' // blank if cell from previous row occupies this space\r\n                return /* html */`\r\n                  <td\r\n                    class=\"pg-cell-wrapper pg-cell-wrapper--${cellType} pg-cell-wrapper--${cellType}-active ${hasStarted ? 'pg-cell-wrapper--overflow' : ''}\"\r\n                    colspan=\"${span}\"\r\n                    id=\"${event ? getEventId(event) : ''}\"\r\n                    ${event ? `onclick=\"${runMethod('openEventDialog', event)}\"` : ''}\r\n                  >\r\n                    <div class=\"pg-cell pg-cell--${cellType} pg-cell--${cellType}-active\">${eventName}</div>\r\n                  </td>\r\n                `\r\n              })}\r\n            </tr>\r\n          `)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  `\r\n}\r\n\r\nexport default renderByTime\r\n","import { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderFavorites = ({ favorites }) => /* html */`\r\n  <div class=\"pg-table-wrapper\">\r\n    <table class=\"pg-table\">\r\n      <thead class=\"pg-header\">\r\n        <tr class=\"pg-row\">\r\n          <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n            <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> Favorites</div>\r\n          </td>\r\n        </tr>\r\n      </thead>\r\n      <tbody class=\"pg-body\">\r\n        ${favorites.length === 0\r\n          ? /* html */`\r\n              <tr class=\"pg-row\">\r\n                <td class=\"pg-cell-wrapper pg-cell-wrapper--data  pg-cell-wrapper--data-favorite\">\r\n                  <div class=\"pg-cell pg-cell--data pg-cell--data-favorite\">You have no favorites.</div>\r\n                </td>\r\n              </tr>\r\n            `\r\n          : mapString(favorites, event => {\r\n            return /* html */`\r\n              <tr class=\"pg-row\">\r\n                <td class=\"pg-cell-wrapper pg-cell-wrapper--data  pg-cell-wrapper--data-favorite\" onclick=\"${runMethod('openEventDialog', event)}\">\r\n                  <div class=\"pg-cell pg-cell--data pg-cell--data-favorite\">${event.name}</div>\r\n                </td>\r\n              </tr>\r\n            `\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n`\r\n\r\nexport default renderFavorites\r\n","import { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderSearchResults = ({ searchResults }) => /* html */`\r\n  <div class=\"pg-table-wrapper\">\r\n    <table class=\"pg-table\">\r\n      <thead class=\"pg-header\">\r\n        <tr class=\"pg-row\">\r\n          <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n            <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> Search Results</div>\r\n          </td>\r\n        </tr>\r\n      </thead>\r\n      <tbody class=\"pg-body\">\r\n        ${searchResults.length === 0\r\n          ? /* html */`\r\n              <tr class=\"pg-row\">\r\n                <td class=\"pg-cell-wrapper pg-cell-wrapper--data  pg-cell-wrapper--data-favorite\">\r\n                  <div class=\"pg-cell pg-cell--data pg-cell--data-favorite\">No results found.</div>\r\n                </td>\r\n              </tr>\r\n            `\r\n          : mapString(searchResults, event => {\r\n            return /* html */`\r\n              <tr class=\"pg-row\">\r\n                <td class=\"pg-cell-wrapper pg-cell-wrapper--data  pg-cell-wrapper--data-favorite\" onclick=\"${runMethod('openEventDialog', event)}\">\r\n                  <div class=\"pg-cell pg-cell--data pg-cell--data-favorite\">${event.name}</div>\r\n                </td>\r\n              </tr>\r\n            `\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n`\r\n\r\nexport default renderSearchResults\r\n","import { getLocations, getEvents, getTimes, getFavorites, addFavorite, removeFavorite } from '../../exports'\r\nimport { getStyles } from './getStyles'\r\nimport { clearHTML, getDateInfo, getEventId, search } from '../../utilities'\r\nimport { DEFAULT_BREAKPOINT, DEFAULT_EVENT, DEFAULT_TIMES } from '../../constants'\r\nimport { getActiveEvent } from './componentUtils'\r\nimport renderSortDialog from './renderSortDialog'\r\nimport renderEventDialog from './renderEventDialog'\r\nimport renderByLocation from './renderByLocation'\r\nimport renderByTime from './renderByTime'\r\nimport renderFavorites from './renderFavorites'\r\nimport renderSearchBar from './renderSearchBar'\r\nimport renderSearchResults from './renderSearchResults'\r\n\r\n// A native web component for the main event schedule\r\nclass ProgramGuideNative extends HTMLElement {\r\n\r\n  constructor() {\r\n\r\n    // set up basic component needs\r\n    super()\r\n    const component = this\r\n    component.root = component.attachShadow({ mode: 'open' })\r\n\r\n    // component state\r\n    component.locations = []\r\n    component.events = []\r\n    component.times = DEFAULT_TIMES\r\n    component.activeDay = ''\r\n    component.activeLocation = ''\r\n    component.activeEvent = getActiveEvent(DEFAULT_EVENT)\r\n    component.sortDialogOpen = false\r\n    component.eventDialogOpen = false\r\n    component.sortBy = 'location' // location | allTime | now | nowOnly | time | favorites\r\n    component.favorites = []\r\n    component.currentSearch = ''\r\n    component.searchResults = []\r\n\r\n    // render loading spinner\r\n    component.render({ loading: true })\r\n\r\n    // asynchronously get data and render table\r\n    getLocations().then(async locations => {\r\n\r\n      // set the default active location for mobile view\r\n      component.events = await getEvents()\r\n      component.times = await getTimes()\r\n      component.favorites = await getFavorites()\r\n      component.locations = locations\r\n      component.activeLocation = locations[0]\r\n      const { days } = component.times || DEFAULT_TIMES\r\n      component.activeDay = Object.keys(days)[0]\r\n      const firstTime = days[component.activeDay][0].date\r\n      const { date, time } = getDateInfo(firstTime)\r\n      component.activeTime = new Date(`${date} ${time}`)\r\n\r\n      // initial render\r\n      component.render()\r\n    })\r\n  }\r\n\r\n  async addFavorite(encodedEvent) {\r\n    const component = this\r\n    const eventJSON = decodeURIComponent(encodedEvent)\r\n    const event = JSON.parse(eventJSON)\r\n    component.favorites.push(event)\r\n    component.render()\r\n    return await addFavorite(event)\r\n  }\r\n\r\n  async removeFavorite(encodedEvent) {\r\n    const component = this\r\n    const eventJSON = decodeURIComponent(encodedEvent)\r\n    const event = JSON.parse(eventJSON)\r\n    const removeIndex = component.favorites.findIndex(({ location: _location, start, name }) => {\r\n      const { location: cLocation, start: cStart, name: cName } = event\r\n      return _location === cLocation && start === cStart && name === cName\r\n    })\r\n    component.favorites.splice(removeIndex, 1)\r\n    component.render()\r\n    return await removeFavorite(event)\r\n  }\r\n\r\n  toggleSortDialog(_bool) {\r\n    const component = this\r\n    const bool = _bool === 'true' ? true : !!_bool\r\n    component.sortDialogOpen = bool\r\n    component.render()\r\n  }\r\n\r\n  openEventDialog(encodedEvent) {\r\n    const component = this\r\n    const eventJSON = decodeURIComponent(encodedEvent)\r\n    const event = JSON.parse(eventJSON)\r\n    component.activeEvent = getActiveEvent(event)\r\n    component.eventDialogOpen = true\r\n    component.render()\r\n  }\r\n\r\n  closeEventDialog() {\r\n    const component = this\r\n    component.eventDialogOpen = false\r\n    component.render()\r\n\r\n    // scroll to the event where user left off\r\n    const eventEl = component.root.getElementById(getEventId(component.activeEvent))\r\n    if (eventEl) eventEl.scrollIntoView()\r\n  }\r\n\r\n  selectActiveLocation(_location) {\r\n    const component = this\r\n    component.sortBy = 'location'\r\n    component.activeLocation = _location\r\n    component.sortDialogOpen = false // close upon selection\r\n    component.render()\r\n  }\r\n\r\n  selectActiveDay(event) {\r\n    const component = this\r\n    const activeDay = component.activeDay = event.target.value\r\n    const timeString = component.activeTime.toLocaleTimeString()\r\n    component.activeTime = new Date(`${activeDay} ${timeString}`)\r\n  }\r\n\r\n  selectActiveTime({ target }) {\r\n    const component = this\r\n\r\n    // validate the time and autocorrect\r\n    if (target.min > target.value) target.value = target.min\r\n    if (target.max < target.value) target.value = target.max\r\n    const { interval } = component.times || DEFAULT_TIMES\r\n    const [hr, mn] = target.value.split(':')\r\n    const roundedMn = Math.round(mn / interval) * interval\r\n    const newMn = String(roundedMn).length === 1 ? `0${roundedMn}` : roundedMn\r\n    target.value = `${hr}:${newMn}`\r\n\r\n    // set the time\r\n    const { activeDay } = component\r\n    const timeString = target.value\r\n    component.activeTime = new Date(`${activeDay} ${timeString}`)\r\n  }\r\n\r\n  selectSortBy(sortBy) {\r\n    const component = this\r\n    component.sortBy = sortBy\r\n    component.sortDialogOpen = false // close upon selection\r\n    component.render()\r\n  }\r\n\r\n  changeSearch({ target }) {\r\n    const component = this\r\n    component.currentSearch = target.value\r\n  }\r\n\r\n  search(event) {\r\n    event.preventDefault()\r\n    const component = this\r\n    const { currentSearch, events } = component\r\n\r\n    // filter search results\r\n    component.searchResults = events.filter(event =>\r\n      search(currentSearch, event.name)\r\n      || search(currentSearch, event.location)\r\n      || search(currentSearch, event.description)\r\n    )\r\n\r\n    // sort name matches at the top\r\n    component.searchResults.sort((prev, next) => {\r\n      const prevName = search(currentSearch, prev.name)\r\n      const nextName = search(currentSearch, next.name)\r\n      return !prevName && nextName ? 1 : (prevName && !nextName ? -1 : 0)\r\n    })\r\n\r\n    // render search results\r\n    component.sortBy = 'search'\r\n    component.render()\r\n  }\r\n\r\n  render({ loading } = {}) {\r\n    const component = this\r\n\r\n    // clear previously rendered content\r\n    clearHTML(component.root)\r\n\r\n    // get style\r\n    const { css, breakpoint } = component.dataset\r\n    const style = css || getStyles(breakpoint || DEFAULT_BREAKPOINT)\r\n\r\n    // render loading spinner if necessary\r\n    if (loading) {\r\n      const loadingTemplate = document.createElement('template')\r\n      loadingTemplate.innerHTML = /* html */`\r\n        <style>${style}</style>\r\n        <div class=\"pg-loading\"></div>\r\n      `\r\n      component.root.appendChild(loadingTemplate.content.cloneNode(true))\r\n      return true // success\r\n    }\r\n\r\n    // determine which render method to use\r\n    const renderMap = {\r\n      location: renderByLocation,\r\n      time: renderByTime,\r\n      allTime: renderByTime,\r\n      now: renderByTime,\r\n      nowOnly: renderByTime,\r\n      favorites: renderFavorites,\r\n      search: renderSearchResults,\r\n    }\r\n    const renderTable = renderMap[component.sortBy]\r\n\r\n    // rewrite the template HTML\r\n    const tableTemplate = document.createElement('template')\r\n    tableTemplate.innerHTML = /* html */`\r\n      <style>${style}</style>\r\n      ${renderSearchBar(component)}\r\n      ${renderTable(component)}\r\n      ${renderSortDialog(component)}\r\n      ${renderEventDialog(component)}\r\n    `\r\n    component.root.appendChild(tableTemplate.content.cloneNode(true))\r\n    return true // success\r\n  }\r\n}\r\n\r\nexport default ProgramGuideNative\r\n","import { runMethod } from '../../utilities'\r\n\r\nconst renderSearchBar = ({ currentSearch }) => /* html */`\r\n  <form class=\"pg-search-bar\" onsubmit=\"${runMethod('search')}\">\r\n    <input class=\"pg-search-input\" onchange=\"${runMethod('changeSearch')}\" value=\"${currentSearch}\" />\r\n    <button class=\"pg-search-button\">&#x1F50D;</button>\r\n  </form>\r\n`\r\n\r\nexport default renderSearchBar\r\n","import { DEFAULT_BREAKPOINT, DEFAULT_TIMES } from '../../constants'\r\nimport { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderSortDialog = ({ sortDialogOpen, locations, times, activeDay, activeTime: _activeTime, dataset }) => {\r\n\r\n  // only show location list if the columns are collapsed\r\n  const { breakpoint = DEFAULT_BREAKPOINT } = dataset\r\n  const beyondThreshold = !window.matchMedia(`(max-width: ${breakpoint})`).matches\r\n\r\n  const { days, interval } = times || DEFAULT_TIMES\r\n  const getTimeValue = date => date.toLocaleTimeString([], { hour12: false, timeStyle: 'short' })\r\n  const activeTime = getTimeValue(_activeTime)\r\n  const currentTimes = days[activeDay]\r\n  const minTime = getTimeValue(currentTimes[0].date)\r\n  const maxTime = getTimeValue(currentTimes[currentTimes.length - 1].date)\r\n  const step = interval * 60\r\n\r\n  return /* html */`\r\n    <dialog class=\"pg-dialog\" ${sortDialogOpen ? 'open' : ''}>\r\n      <section class=\"pg-dialog-body\">\r\n        <header class=\"pg-dialog-header\">\r\n          <h1 class=\"pg-dialog-title\">Options</h1>\r\n          <button class=\"pg-dialog-close\" onclick=\"${runMethod('toggleSortDialog', false)}\">&times;</button>\r\n        </header>\r\n        <section class=\"pg-dialog-content\">\r\n          <menu class=\"pg-dialog-menu\">\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'favorites')}\">\r\n              <i class=\"pg-favorite-icon\">&starf;</i>\r\n              <span>View Favorites</span>\r\n            </button>\r\n          </menu>\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Which day?</h2>\r\n            <select class=\"pg-dialog-select\" onchange=\"${runMethod('selectActiveDay')}\">\r\n              ${mapString(Object.keys(days), day => /* html */`\r\n                <option value=\"${day}\" ${day === activeDay ? 'selected' : ''}>${day}</option>\r\n              `)}\r\n            </select>\r\n          </menu>\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Time</h2>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'allTime')}\">All Time</button>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'now')}\">Right Now &amp; On</button>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'nowOnly')}\">Right Now Only</button>\r\n            <div class=\"pg-dialog-menu-special-item\">\r\n              <div class=\"pg-dialog-menu-item pg-dialog-menu-item--input\">\r\n                <input\r\n                  type=\"time\"\r\n                  class=\"pg-dialog-menu-input\"\r\n                  value=\"${activeTime}\"\r\n                  min=\"${minTime}\"\r\n                  max=\"${maxTime}\"\r\n                  step=\"${step}\"\r\n                  onchange=\"${runMethod('selectActiveTime')}\"\r\n                />\r\n                <span>&amp; On</span>\r\n              </div>\r\n              <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'time')}\">Go &roarr;</button>\r\n            </div>\r\n          </menu>\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Location</h2>\r\n            ${beyondThreshold\r\n              ? /* html */`<button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'location')}\">All Locations</button>`\r\n              : mapString(locations, _location => /* html */`\r\n                <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectActiveLocation', _location)}\">${_location}</button>\r\n              `)\r\n            }\r\n          </menu>\r\n        </section>\r\n      </section>\r\n    </dialog>\r\n  `\r\n}\r\n\r\nexport default renderSortDialog\r\n","import { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderEventDialog = ({ eventDialogOpen, favorites, activeEvent }) => {\r\n\r\n  const existingFavorite = favorites.find(({ location: _location, start, name }) => {\r\n    const { location: aLocation, start: aStart, name: aName } = activeEvent\r\n    return _location === aLocation && Number(new Date(start)) === Number(aStart) && name === aName\r\n  })\r\n  const favoriteMethod = existingFavorite ? 'removeFavorite' : 'addFavorite'\r\n  const favoriteText = existingFavorite ? 'Remove from Favorites' : 'Add to Favorites'\r\n\r\n  return /* html */`\r\n    <dialog class=\"pg-dialog\" ${eventDialogOpen ? 'open' : ''}>\r\n      <article class=\"pg-dialog-body\">\r\n        <header class=\"pg-dialog-header\">\r\n          <h1 class=\"pg-dialog-title\">${activeEvent.name}</h1>\r\n          <button class=\"pg-dialog-close\" onclick=\"${runMethod('closeEventDialog')}\">&times;</button>\r\n        </header>\r\n        <section class=\"pg-dialog-content pg-dialog-content--text-container\">\r\n          ${mapString(activeEvent.description.split(/\\n/), paragraph => /* html */`\r\n            <p class=\"pg-dialog-paragraph\">${paragraph}</p>\r\n          `)}\r\n        </section>\r\n        <footer class=\"pg-dialog-footer\">\r\n          <time datetime=\"${activeEvent.start.toISOString()}\" class=\"pg-time pg-time--start\">\r\n            ${activeEvent.start.toLocaleTimeString('en-US', { timeStyle: 'short' })}\r\n          </time>\r\n          to\r\n          <time datetime=\"${activeEvent.end.toISOString()}\" class=\"pg-time pg-time--end\">\r\n            ${activeEvent.end.toLocaleTimeString('en-US', { timeStyle: 'short' })}\r\n          </time>\r\n          <br/>\r\n          @ ${activeEvent.location}\r\n        </footer>\r\n        <section class=\"pg-dialog-content\">\r\n          <menu class=\"pg-dialog-menu\">\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod(favoriteMethod, activeEvent)}\">\r\n              <span>${favoriteText}</span>\r\n              <i class=\"pg-favorite-icon\">&starf;</i>\r\n            </button>\r\n          </menu>\r\n        </section>\r\n      </article>\r\n    </dialog>\r\n  `\r\n}\r\n\r\nexport default renderEventDialog\r\n","import * as Exports from '../lib/exports'\r\nimport * as Components from '../lib/uiComponents'\r\n\r\nexport default {\r\n  ...Exports,\r\n  Components,\r\n}\r\n"],"names":["DEFAULT_FLOOR_PLAN","title","imageSrc","clickableAreas","DEFAULT_GUIDE","events","floorPlan","DEFAULT_ADD_FAVORITE","async","favoriteEvents","JSON","parse","localStorage","getItem","push","event","eventsJSON","stringify","setItem","DEFAULT_GET_FAVORITES","DEFAULT_FETCH_DATA","Promise","resolve","guide","addFavorite","getFavorites","NOW","Date","now","DEFAULT_EVENT","start","end","location","name","description","DEFAULT_CLICKABLE_AREA","shape","coords","href","alt","DEFAULT_TIMES","days","interval","DEFAULT_BREAKPOINT","NOOP","getType","val","constructor","toLowerCase","checkType","type","validString","validArray","every","t","some","isObject","obj","useFallback","fallbackObj","onFallback","_altTypes","key","fallbackValue","valid","value","empty","altTypes","altTypesArr","mismatch","useCast","getValue","status","console","warn","Object","keys","reduce","castObj","checkFilterType","filter","after","before","locations","search","mapString","arr","callback","map","join","roundMinutes","_date","nearestMinute","date","roundedMinutes","Math","round","getMinutes","setMinutes","WholeNumber","num","Number","toFixed","getDay","idx","short","getDateInfo","time","toLocaleTimeString","timeStyle","day","toLocaleDateString","runMethod","args","length","a","encodeURIComponent","String","getEventId","_start","snip","s","replace","_input","_text","formatForSimilarMatch","str","normalize","input","text","split","state","_hasFetched","hasFetched","this","bool","fetchQueue","forEach","waitForFetch","removeFavorite","removeIndex","findIndex","_location","cLocation","cStart","cName","splice","add","Set","times","allTimes","earliestTime","min","latestTime","max","minutes","getTimeObject","timeString","getFullDay","prevTime","currentTime","getDate","find","getEvents","_filters","include","_include","exclude","_exclude","filters","Infinity","contains","getLocations","getTimes","init","data","castEvent","castFloorPlan","castClickableArea","getActiveEvent","getCellData","spanState","sortBy","_event","e","hasStarted","eventName","cellType","duration","getStart","span","blank","renderByLocation","activeLocation","activeDay","getActiveClass","className","renderByTime","activeTime","_times","nowDay","nowDate","nowTime","filteredTimes","nowOnly","allTime","currentDay","renderFavorites","favorites","renderSearchResults","searchResults","ProgramGuideNative","HTMLElement","super","component","root","attachShadow","mode","activeEvent","sortDialogOpen","eventDialogOpen","currentSearch","render","loading","then","firstTime","encodedEvent","eventJSON","decodeURIComponent","toggleSortDialog","_bool","openEventDialog","closeEventDialog","eventEl","getElementById","scrollIntoView","selectActiveLocation","selectActiveDay","target","selectActiveTime","hr","mn","roundedMn","newMn","selectSortBy","changeSearch","preventDefault","sort","prev","next","prevName","nextName","element","i","childNodes","removeChild","lastChild","clearHTML","css","breakpoint","dataset","style","getStyles","loadingTemplate","document","createElement","innerHTML","appendChild","content","cloneNode","renderTable","tableTemplate","renderSearchBar","_activeTime","beyondThreshold","window","matchMedia","matches","getTimeValue","hour12","currentTimes","minTime","maxTime","step","renderSortDialog","existingFavorite","aLocation","aStart","aName","favoriteMethod","favoriteText","paragraph","toISOString","renderEventDialog","Exports","Components"],"mappings":"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"}