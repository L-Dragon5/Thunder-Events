{"version":3,"file":"thunderEvents.min.mjs","sources":["../lib/constants.js","../lib/utilities.js","../lib/state.js","../lib/exports.js","../lib/uiComponents.js","../lib/css.js","../src/index.js"],"sourcesContent":["export const DEFAULT_FLOOR_PLAN = {\r\n  title: 'Venue',\r\n  imageSrc: '',\r\n  clickableAreas: [],\r\n}\r\n\r\nexport const DEFAULT_GUIDE = {\r\n  events: [],\r\n  floorPlan: DEFAULT_FLOOR_PLAN,\r\n}\r\n\r\nexport const DEFAULT_FETCH_GUIDE = () => Promise.resolve(DEFAULT_GUIDE)\r\n\r\nconst NOW = Date.now() // date in milliseconds\r\n\r\nconst HOUR = 1000 * 60 * 60 // milliseconds * seconds * minutes\r\n\r\nexport const DEFAULT_EVENT = {\r\n  start: NOW,\r\n  end: NOW + HOUR,\r\n  location: '(none)',\r\n  name: '(none)',\r\n}\r\n\r\nexport const DEFAULT_CLICKABLE_AREA = {\r\n  shape: 'rect',\r\n  coords: [],\r\n  href: '#',\r\n  alt: '',\r\n}\r\n\r\nexport const NOOP = () => {}\r\n","import { NOOP } from './constants'\r\n\r\nexport const getType = val => {\r\n  if (val === null) return 'null'\r\n  if (typeof val === 'object') return val.constructor.name.toLowerCase()\r\n  return typeof val\r\n}\r\n\r\nexport const checkType = (val, type) => {\r\n  const validString = getType(type) === 'string'\r\n  const validArray = getType(type) === 'array' && type.every(t => getType(t) === 'string')\r\n  if (!validString && !validArray) throw '`checkType()` expects either a string or array of strings in the second argument'\r\n  if (validString) return getType(val) === type\r\n  if (validArray) return type.some(t => getType(val) === t)\r\n}\r\n\r\nexport const isObject = obj => checkType(obj, 'object')\r\n\r\nexport const isEmpty = val => checkType(val, ['undefined', 'null'])\r\n\r\nexport const contains = (val, search) => {\r\n  const valIsString = checkType(val, 'string')\r\n  const valIsArray = checkType(val, 'array') && val.every(t => checkType(t, 'string'))\r\n  const validSearch = checkType(search, ['string', 'regexp'])\r\n  if (!valIsArray && !valIsString) throw '`contains()` expects either a string or array of strings in the first argument'\r\n  if (!validSearch) throw '`contains()` expects either a string or regular expression in the second argument'\r\n  if (valIsArray) return val.some(v => v.search(search) !== -1)\r\n  if (valIsString) return val.search(search) !== -1\r\n}\r\n\r\n/**\r\n * Returns a function which gets a field from a given object, unless it's empty,\r\n * in which case it gets that same field from a fallback object.\r\n * @param {object} fallbackObj - The object to be referenced when a field is empty on the original object.\r\n * @param {function} onFallback - An optional callback to run when the fallback is used.\r\n * @param {object} _altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to get the value from a provided key.\r\n */\r\nexport const useFallback = (fallbackObj, onFallback = NOOP, _altTypes = {}) => {\r\n  if (!isObject(fallbackObj)) throw '`useFallback()` expects an object in the first argument'\r\n  if (!checkType(onFallback, 'function')) throw '`useFallback()` expects a function in the second argument'\r\n  if (!isObject(_altTypes)) throw '`useFallback()` expects an object in the third argument'\r\n  return (obj, key) => {\r\n    const fallbackValue = fallbackObj[key]\r\n    const valid = isObject(obj)\r\n    const value = valid ? obj[key] : null\r\n    const empty = isEmpty(value)\r\n    const type = getType(value)\r\n    const altTypes = _altTypes[key]\r\n    const altTypesArr = checkType(altTypes, 'array') ? altTypes : (checkType(altTypes, 'string') ? [altTypes] : [])\r\n    const mismatch = type !== getType(fallbackValue) && !altTypesArr.some(t => t === type)\r\n    if (!valid || empty || mismatch) {\r\n      const status = !valid ? 'invalid' : (empty ? 'empty' : 'mismatch')\r\n      onFallback(status, key)\r\n      return fallbackValue\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a function which casts any value to the same structure as the provided object (the type).\r\n * @param {object} type - An object which serves as the (shallow) structure constraints.\r\n * @param {string} name - The optional name of the type for logging purposes.\r\n * @param {object} altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to cast a provided value to the given type.\r\n */\r\nexport const useCast = (type, name = 'object', altTypes = {}) => {\r\n  if (!isObject(type)) throw 'You may only cast to custom object types'\r\n  return obj => {\r\n    if (!isObject(obj)) return type\r\n    const getValue = useFallback(type, (status, key) => {\r\n      if (status === 'invalid') console.warn(`The provided ${name} is not a valid object.`)\r\n      else if (status === 'mismatch') console.warn(`The \\`${key}\\` field expected type \\`${getType(type[key])}\\` but got \\`${getType(obj[key])}\\`.`)\r\n      else if (status === 'empty') console.warn(`The provided ${name} did not have the \\`${key}\\` field.`)\r\n    }, altTypes)\r\n    return Object.keys(type).reduce((castObj, key) => {\r\n      castObj[key] = getValue(obj, key)\r\n      return castObj\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport const checkFilterType = (filter = {}) => {\r\n  if ('after' in filter && !checkType(filter.after, ['number', 'date'])) throw 'The `after` field expects a number or date'\r\n  if ('before' in filter && !checkType(filter.before, ['number', 'date'])) throw 'The `before` field expects a number or date'\r\n  if ('locations' in filter && !checkType(filter.locations, 'array')) throw 'The `locations` field expects an array'\r\n  if ('search' in filter && !checkType(filter.search, ['string', 'regexp'])) throw 'The `search` field expects a string or regular expression'\r\n  return true // indicate success\r\n}\r\n\r\n/**\r\n * This is the most efficient way to clear HTML, much faster than innerHTML.\r\n * @param {HTMLElement} element - the DOM element we want to empty\r\n */\r\nexport const clearHTML = element => {\r\n  let i = element.childNodes.length\r\n  while (i--) { element.removeChild(element.lastChild) }\r\n}\r\n\r\n/**\r\n * This helps us avoid trailing commas when mapping template literals.\r\n * @param {Array} arr - the array to iterate\r\n * @param {function} callback - the callback for each iteration; should return a string or stringifiable value\r\n */\r\nexport const mapString = (arr, callback) => arr.map(callback).join('')\r\n\r\n/**\r\n * Rounds a date to the nearest given minute\r\n * @param {Date|number|string} _date - The date to round (or anything that can be parsed as a date)\r\n * @param {number} nearestMinute - The nearest minute to round to (15 by default)\r\n */\r\nexport const roundMinutes = (_date, nearestMinute = 15) => {\r\n  const date = new Date(_date)\r\n  const roundedMinutes = Math.round(date.getMinutes() / nearestMinute) * nearestMinute\r\n  date.setMinutes(roundedMinutes)\r\n  return date\r\n}\r\n\r\nexport const WholeNumber = num => Number(num.toFixed())\r\n","import { DEFAULT_GUIDE } from './constants'\r\nimport { checkType, roundMinutes } from './utilities'\r\n\r\nexport const state = {\r\n\r\n  // utilities for synchronous actions after loading state\r\n  _hasFetched: false,\r\n  get hasFetched() { return this._hasFetched },\r\n  set hasFetched(bool) {\r\n    this._hasFetched = bool\r\n    if (bool === false) return false\r\n    this.fetchQueue.forEach(resolve => resolve())\r\n    return true\r\n  },\r\n  fetchQueue: [],\r\n  waitForFetch() {\r\n    return new Promise(resolve => {\r\n      if (this.hasFetched) resolve()\r\n      else this.fetchQueue.push(resolve)\r\n    })\r\n  },\r\n\r\n  // default guide\r\n  guide: DEFAULT_GUIDE,\r\n\r\n  // get locations from events dynamically\r\n  get locations() {\r\n    const events = this.guide?.events || []\r\n    return [...events.reduce((locations, event) => {\r\n      if (!checkType(event, 'object')) return locations\r\n      if (!checkType(event.location, 'string')) return locations\r\n      locations.add(event.location)\r\n      return locations\r\n    }, new Set())]\r\n  },\r\n\r\n  // get times from events dynamically\r\n  get times() {\r\n    const events = this.guide?.events || []\r\n    const allTimes = [...events.reduce((times, event) => {\r\n      if (!checkType(event, 'object')) return times\r\n      if (!checkType(event.start, ['number', 'date'])) return times\r\n      if (!checkType(event.end, ['number', 'date'])) return times\r\n      times.add(roundMinutes(event.start))\r\n      times.add(roundMinutes(event.end))\r\n      return times\r\n    }, new Set())]\r\n    const earliestTime = new Date(Math.min(...allTimes))\r\n    const latestTime = new Date(Math.max(...allTimes))\r\n    const interval = allTimes.reduce((interval, date) => {\r\n      if (interval !== 15) {\r\n        const minutes = date.getMinutes()\r\n        if (minutes === 30) interval = 30\r\n        if (minutes === 15 || minutes === 45) interval = 15\r\n      }\r\n      return interval\r\n    }, 0)\r\n    const getTimeObject = date => ({\r\n      date,\r\n      timeString: date.toLocaleTimeString('en-US', { timeStyle: 'short' }),\r\n    })\r\n    let days = { [earliestTime.toLocaleDateString()]: [getTimeObject(earliestTime)] }\r\n    let prevTime = earliestTime\r\n    while (prevTime < latestTime) {\r\n      const lastTimeInDay = Math.max(...allTimes.filter(t => t.getDate() === prevTime.getDate()))\r\n      let currentTime = null\r\n      if (lastTimeInDay === Number(prevTime)) {\r\n        currentTime = new Date(allTimes.find(time => time > prevTime))\r\n        days[currentTime.toLocaleDateString()] = [getTimeObject(currentTime)]\r\n      } else {\r\n        currentTime = new Date(prevTime)\r\n        currentTime.setMinutes(currentTime.getMinutes() + interval)\r\n        days[currentTime.toLocaleDateString()].push(getTimeObject(currentTime))\r\n      }\r\n      prevTime = currentTime\r\n    }\r\n    return {\r\n      days,\r\n      interval,\r\n    }\r\n  },\r\n}\r\n","import {\r\n  DEFAULT_FETCH_GUIDE,\r\n  DEFAULT_EVENT,\r\n  DEFAULT_FLOOR_PLAN,\r\n  DEFAULT_CLICKABLE_AREA,\r\n} from './constants'\r\nimport {\r\n  useCast,\r\n  checkType,\r\n  checkFilterType,\r\n  isObject,\r\n} from './utilities'\r\nimport { state } from './state'\r\n\r\nconst fetchGuide = async (fetchGuide = DEFAULT_FETCH_GUIDE) => {\r\n  const guide = await fetchGuide()\r\n  if (!isObject(guide)) throw '`fetchGuide()` must return an object'\r\n  if ('events' in guide) {\r\n    if (!checkType(guide.events, 'array')) throw 'The `events` field expects an array'\r\n    const castEvent = useCast(DEFAULT_EVENT, 'event', { start: 'date', end: 'date' })\r\n    state.guide.events = guide.events.map(castEvent)\r\n  }\r\n  if ('floorPlan' in guide) {\r\n    if (!isObject(guide.floorPlan)) throw 'The `floorPlan` field expects an object'\r\n    const castFloorPlan = useCast(DEFAULT_FLOOR_PLAN, 'floor plan')\r\n    const castClickableArea = useCast(DEFAULT_CLICKABLE_AREA, 'clickable area')\r\n    const floorPlan = castFloorPlan(guide.floorPlan)\r\n    state.guide.floorPlan = {\r\n      ...floorPlan,\r\n      clickableAreas: floorPlan.clickableAreas.map(castClickableArea),\r\n    }\r\n  }\r\n  state.hasFetched = true\r\n}\r\n\r\nconst getEvents = async (_filters = {}) => {\r\n  await state.waitForFetch()\r\n  if (!isObject(_filters)) throw '`getEvents()` expects an object in the first argument'\r\n  const { include: _include = {}, exclude: _exclude = {} } = _filters\r\n  checkFilterType(_include) // throws if invalid\r\n  checkFilterType(_exclude) // throws if invalid\r\n  const filters = {\r\n    ..._filters,\r\n    include: {\r\n      ..._include,\r\n      after: _include.after ? Number(_include.after) : 0,\r\n      before: _include.before ? Number(_include.before) : Infinity,\r\n    },\r\n    exclude: {\r\n      ..._exclude,\r\n      after: _exclude.after ? Number(_exclude.after) : Infinity,\r\n      before: _exclude.before ? Number(_exclude.before) : 0,\r\n    },\r\n  }\r\n  const { include = {}, exclude = {} } = filters\r\n  return state.guide.events.filter(event => {\r\n    \r\n    // filter within time range\r\n    if (event.start < include.after) return false\r\n    if (event.start > exclude.after) return false\r\n    if (event.end > include.before) return false\r\n    if (event.end < exclude.before) return false\r\n    \r\n    // filter by location\r\n    if ('locations' in include && !contains(include.locations, event.location)) return false\r\n    if ('locations' in exclude && contains(exclude.locations, event.location)) return false\r\n    \r\n    // filter by name\r\n    if ('search' in include && !contains(event.name, include.search)) return false\r\n    if ('search' in exclude && contains(event.name, exclude.search)) return false\r\n\r\n    // if all previous checks pass, keep this event in the array\r\n    return true\r\n  })\r\n}\r\n\r\nconst getLocations = async () => {\r\n  await state.waitForFetch()\r\n  return state.locations\r\n}\r\n\r\nconst getTimes = async () => {\r\n  await state.waitForFetch()\r\n  return state.times\r\n}\r\n\r\nconst getFloorPlan = async () => {\r\n  await waitForFetch()\r\n  return state.guide.floorPlan\r\n}\r\n\r\nexport {\r\n  fetchGuide,\r\n  getEvents,\r\n  getLocations,\r\n  getTimes,\r\n  getFloorPlan,\r\n}\r\n","import { getLocations, getEvents, getTimes } from './exports'\r\nimport { programGuideStyles } from './css'\r\nimport { clearHTML, mapString, WholeNumber } from './utilities'\r\n\r\n// a small local utility to extract logic away from the template\r\nconst getCellData = ({ events, rowState, date, interval, location }) => {\r\n  const event = events.find(e =>\r\n    Number(e.start) === Number(date)\r\n    && e.location === location)\r\n  const eventName = event ? event.name : ''\r\n  const cellType = event ? 'data' : 'data-empty'\r\n  const duration = event ? WholeNumber((event.end - event.start) / 1000 / 60) : 0\r\n  const rowspan = duration ? WholeNumber(duration / interval) : 1\r\n  const blank = !!rowState[location]\r\n  if (blank) --rowState[location]\r\n  else if (rowspan > 1) rowState[location] = rowspan\r\n  return { eventName, cellType, rowspan, blank }\r\n}\r\n\r\nexport class ProgramGuideNative extends HTMLElement {\r\n\r\n  constructor() {\r\n\r\n    // set up component\r\n    super()\r\n    const component = this\r\n    component.root = component.attachShadow({ mode: 'open' })\r\n    const style = `<style>${component.dataset.css || programGuideStyles}</style>`\r\n\r\n    // render loading spinner\r\n    const loadingTemplate = document.createElement('template')\r\n    loadingTemplate.innerHTML = `${style}<div class=\"pg-loading\"></div>`\r\n    component.root.appendChild(loadingTemplate.content.cloneNode(true))\r\n\r\n    // asynchronously get data and render table\r\n    getEvents().then(async events => {\r\n      const { days, interval } = await getTimes()\r\n      const locations = await getLocations()\r\n      const tableTemplate = document.createElement('template')\r\n\r\n      // this keeps rowspans from previous iterations in memory\r\n      // so we can avoid adding extra table cells.\r\n      const rowState = {}\r\n\r\n      // render the table(s)\r\n      tableTemplate.innerHTML = /* html */`\r\n        ${style}\r\n        ${mapString(Object.keys(days), day => {\r\n          const times = days[day]\r\n          return /* html */`\r\n            <table class=\"pg-table\">\r\n              <thead class=\"pg-header\">\r\n                <tr class=\"pg-row\">\r\n                  <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\">\r\n                    <div class=\"pg-cell pg-cell--corner\">${day}</div>\r\n                  </td>\r\n                  ${mapString(locations, location => /* html */`\r\n                    <th class=\"pg-cell-wrapper pg-cell-wrapper--column-header\">\r\n                      <div class=\"pg-cell pg-cell--column-header\">${location}</div>\r\n                    </th>\r\n                  `)}\r\n                </tr>\r\n              </thead>\r\n              <tbody class=\"pg-body\">\r\n                ${mapString(times, ({ date, timeString }) => /* html */`\r\n                  <tr class=\"pg-row\">\r\n                    <th class=\"pg-cell-wrapper pg-cell-wrapper--row-header\">\r\n                      <div class=\"pg-cell pg-cell--row-header\">${timeString}</div>\r\n                    </th>\r\n                    ${mapString(locations, location => {\r\n                      const { eventName, cellType, rowspan, blank } = getCellData({ events, rowState, date, interval, location })\r\n                      if (blank) return '' // blank if cell from previous row occupies this space\r\n                      return /* html */`\r\n                        <td class=\"pg-cell-wrapper pg-cell-wrapper--${cellType}\" rowspan=\"${rowspan}\">\r\n                          <div class=\"pg-cell pg-cell--${cellType}\">${eventName}</div>\r\n                        </td>\r\n                      `\r\n                    })}\r\n                  </tr>\r\n                `)}\r\n              </tbody>\r\n            </table>\r\n          `\r\n        })}\r\n      `\r\n      clearHTML(component.root)\r\n      component.root.appendChild(tableTemplate.content.cloneNode(true))\r\n    })\r\n  }\r\n}\r\n","export const programGuideStyles = `\r\n  .pg-table {\r\n    --font: sans-serif 1.5rem;\r\n    --font-cell: var(--font);\r\n    --font-header: var(--font);\r\n    --font-column-header: var(--font-header);\r\n    --font-row-header: var(--font-header);\r\n    --padding-cell: 1rem 2rem;\r\n    --padding-header: var(--padding-cell);\r\n    --padding-column-header: var(--padding-header);\r\n    --padding-row-header: var(--padding-header);\r\n    --color-background: midnightblue;\r\n    --color-cell: lightsteelblue;\r\n    --color-cell-empty: transparent;\r\n    --color-cell-content: black;\r\n    --color-header: steelblue;\r\n    --color-header-content: white;\r\n    --color-column-header: var(--color-header);\r\n    --color-column-header-content: var(--color-header-content);\r\n    --color-row-header: var(--color-header);\r\n    --color-row-header-content: var(--color-header-content);\r\n    --color-corner: var(--color-header);\r\n    --color-corner-content: var(--color-header-content);\r\n    background-color: var(--color-background);\r\n    margin-bottom: 1rem;\r\n    width: 100%;\r\n  }\r\n  .pg-cell-wrapper {\r\n    background-color: var(--color-cell);\r\n    font: var(--font-cell);\r\n    padding: var(--padding-cell);\r\n    text-align: center;\r\n  }\r\n  .pg-cell-wrapper--corner {\r\n    background-color: var(--color-corner);\r\n    color: var(--color-corner-content);\r\n  }\r\n  .pg-cell-wrapper--row-header {\r\n    background-color: var(--color-row-header);\r\n    color: var(--color-row-header-content);\r\n    font: var(--font-row-header);\r\n    padding: var(--padding-row-header);\r\n  }\r\n  .pg-cell-wrapper--column-header {\r\n    background-color: var(--color-column-header);\r\n    color: var(--color-column-header-content);\r\n    font: var(--font-column-header);\r\n    padding: var(--padding-column-header);\r\n  }\r\n  .pg-cell-wrapper--data-empty {\r\n    background-color: var(--color-cell-empty);\r\n  }\r\n  .pg-loading {\r\n    --color-loading-primary: steelblue;\r\n    --color-loading-secondary: white;\r\n    --size-loader: 5rem;\r\n    height: 10rem;\r\n    width: 100%;\r\n    position: relative;\r\n    z-index: 1;\r\n  }\r\n  .pg-loading::before,\r\n  .pg-loading::after {\r\n    bottom: 0;\r\n    border-radius: 50%;\r\n    content: '';\r\n    display: block;\r\n    left: 0;\r\n    margin: auto;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 2;\r\n  }\r\n  @keyframes spin {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(359deg); }\r\n  }\r\n  .pg-loading::before {\r\n    animation: spin 1s linear infinite;\r\n    background-image: conic-gradient(var(--color-loading-primary), var(--color-loading-secondary));\r\n    border: 0.4rem solid var(--color-loading-primary);\r\n    height: var(--size-loader);\r\n    width: var(--size-loader);\r\n    z-index: 1;\r\n  }\r\n  .pg-loading::after {\r\n    background-color: var(--color-loading-primary);\r\n    border: 0 solid;\r\n    height: calc(var(--size-loader) - 1rem);\r\n    width: calc(var(--size-loader) - 1rem);\r\n    z-index: 2;\r\n  }\r\n`\r\n","import * as Exports from '../lib/exports'\r\nimport * as Components from '../lib/uiComponents'\r\n\r\nexport default {\r\n  ...Exports,\r\n  Components,\r\n}\r\n"],"names":["DEFAULT_FLOOR_PLAN","title","imageSrc","clickableAreas","DEFAULT_GUIDE","events","floorPlan","DEFAULT_FETCH_GUIDE","Promise","resolve","NOW","Date","now","DEFAULT_EVENT","start","end","location","name","DEFAULT_CLICKABLE_AREA","shape","coords","href","alt","NOOP","getType","val","constructor","toLowerCase","checkType","type","validString","validArray","every","t","some","isObject","obj","useFallback","fallbackObj","onFallback","_altTypes","key","fallbackValue","valid","value","empty","altTypes","altTypesArr","mismatch","useCast","getValue","status","console","warn","Object","keys","reduce","castObj","checkFilterType","filter","after","before","locations","search","mapString","arr","callback","map","join","roundMinutes","_date","nearestMinute","date","roundedMinutes","Math","round","getMinutes","setMinutes","WholeNumber","num","Number","toFixed","state","_hasFetched","hasFetched","this","bool","fetchQueue","forEach","waitForFetch","push","guide","event","add","Set","times","allTimes","earliestTime","min","latestTime","max","interval","minutes","getTimeObject","timeString","toLocaleTimeString","timeStyle","days","toLocaleDateString","prevTime","currentTime","getDate","find","time","getEvents","async","_filters","include","_include","exclude","_exclude","filters","Infinity","contains","getLocations","getTimes","fetchGuide","castEvent","castFloorPlan","castClickableArea","ProgramGuideNative","HTMLElement","super","component","root","attachShadow","mode","style","dataset","css","loadingTemplate","document","createElement","innerHTML","appendChild","content","cloneNode","then","tableTemplate","rowState","day","eventName","cellType","rowspan","blank","e","duration","getCellData","element","i","childNodes","length","removeChild","lastChild","clearHTML","Exports","Components"],"mappings":"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"}