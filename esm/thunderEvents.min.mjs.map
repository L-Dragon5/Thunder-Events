{"version":3,"file":"thunderEvents.min.mjs","sources":["../lib/constants.js","../lib/utilities.js","../lib/state.js","../lib/exports.js","../lib/uiComponents/ProgramGuideNative/getStyles.js","../lib/uiComponents/ProgramGuideNative/componentUtils.js","../lib/uiComponents/ProgramGuideNative/renderByTime.js","../lib/uiComponents/ProgramGuideNative/index.js","../lib/uiComponents/ProgramGuideNative/renderByLocation.js","../lib/uiComponents/ProgramGuideNative/renderSortDialog.js","../lib/uiComponents/ProgramGuideNative/renderEventDialog.js","../src/index.js"],"sourcesContent":["export const DEFAULT_FLOOR_PLAN = {\r\n  title: 'Venue',\r\n  imageSrc: '',\r\n  clickableAreas: [],\r\n}\r\n\r\nexport const DEFAULT_GUIDE = {\r\n  events: [],\r\n  floorPlan: DEFAULT_FLOOR_PLAN,\r\n}\r\n\r\nexport const DEFAULT_FETCH_GUIDE = () => Promise.resolve(DEFAULT_GUIDE)\r\n\r\nconst NOW = Date.now() // date in milliseconds\r\n\r\nconst HOUR = 1000 * 60 * 60 // milliseconds * seconds * minutes\r\n\r\nexport const DEFAULT_EVENT = {\r\n  start: NOW,\r\n  end: NOW + HOUR,\r\n  location: '(none)',\r\n  name: '(none)',\r\n  description: '(no description)',\r\n}\r\n\r\nexport const DEFAULT_CLICKABLE_AREA = {\r\n  shape: 'rect',\r\n  coords: [],\r\n  href: '#',\r\n  alt: '',\r\n}\r\n\r\nexport const DEFAULT_TIMES = {\r\n  days: [],\r\n  interval: 60,\r\n}\r\n\r\nexport const DEFAULT_BREAKPOINT = '50em'\r\n\r\nexport const NOOP = () => {}\r\n","import { NOOP } from './constants'\r\n\r\nexport const getType = val => {\r\n  if (val === null) return 'null'\r\n  if (typeof val === 'object') return val.constructor.name.toLowerCase()\r\n  return typeof val\r\n}\r\n\r\nexport const checkType = (val, type) => {\r\n  const validString = getType(type) === 'string'\r\n  const validArray = getType(type) === 'array' && type.every(t => getType(t) === 'string')\r\n  if (!validString && !validArray) throw '`checkType()` expects either a string or array of strings in the second argument'\r\n  if (validString) return getType(val) === type\r\n  if (validArray) return type.some(t => getType(val) === t)\r\n}\r\n\r\nexport const isObject = obj => checkType(obj, 'object')\r\n\r\nexport const isEmpty = val => checkType(val, ['undefined', 'null'])\r\n\r\nexport const contains = (val, search) => {\r\n  const valIsString = checkType(val, 'string')\r\n  const valIsArray = checkType(val, 'array') && val.every(t => checkType(t, 'string'))\r\n  const validSearch = checkType(search, ['string', 'regexp'])\r\n  if (!valIsArray && !valIsString) throw '`contains()` expects either a string or array of strings in the first argument'\r\n  if (!validSearch) throw '`contains()` expects either a string or regular expression in the second argument'\r\n  if (valIsArray) return val.some(v => v.search(search) !== -1)\r\n  if (valIsString) return val.search(search) !== -1\r\n}\r\n\r\n/**\r\n * Returns a function which gets a field from a given object, unless it's empty,\r\n * in which case it gets that same field from a fallback object.\r\n * @param {object} fallbackObj - The object to be referenced when a field is empty on the original object.\r\n * @param {function} onFallback - An optional callback to run when the fallback is used.\r\n * @param {object} _altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to get the value from a provided key.\r\n */\r\nexport const useFallback = (fallbackObj, onFallback = NOOP, _altTypes = {}) => {\r\n  if (!isObject(fallbackObj)) throw '`useFallback()` expects an object in the first argument'\r\n  if (!checkType(onFallback, 'function')) throw '`useFallback()` expects a function in the second argument'\r\n  if (!isObject(_altTypes)) throw '`useFallback()` expects an object in the third argument'\r\n  return (obj, key) => {\r\n    const fallbackValue = fallbackObj[key]\r\n    const valid = isObject(obj)\r\n    const value = valid ? obj[key] : null\r\n    const empty = isEmpty(value)\r\n    const type = getType(value)\r\n    const altTypes = _altTypes[key]\r\n    const altTypesArr = checkType(altTypes, 'array') ? altTypes : (checkType(altTypes, 'string') ? [altTypes] : [])\r\n    const mismatch = type !== getType(fallbackValue) && !altTypesArr.some(t => t === type)\r\n    if (!valid || empty || mismatch) {\r\n      const status = !valid ? 'invalid' : (empty ? 'empty' : 'mismatch')\r\n      onFallback(status, key)\r\n      return fallbackValue\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a function which casts any value to the same structure as the provided object (the type).\r\n * @param {object} type - An object which serves as the (shallow) structure constraints.\r\n * @param {string} name - The optional name of the type for logging purposes.\r\n * @param {object} altTypes - A mapping of fields to acceptable alternative types.\r\n * @returns {function} - Used to cast a provided value to the given type.\r\n */\r\nexport const useCast = (type, name = 'object', altTypes = {}) => {\r\n  if (!isObject(type)) throw 'You may only cast to custom object types'\r\n  return obj => {\r\n    if (!isObject(obj)) return type\r\n    const getValue = useFallback(type, (status, key) => {\r\n      if (status === 'invalid') console.warn(`The provided ${name} is not a valid object.`)\r\n      else if (status === 'mismatch') console.warn(`The \\`${key}\\` field expected type \\`${getType(type[key])}\\` but got \\`${getType(obj[key])}\\`.`)\r\n      else if (status === 'empty') console.warn(`The provided ${name} did not have the \\`${key}\\` field.`)\r\n    }, altTypes)\r\n    return Object.keys(type).reduce((castObj, key) => {\r\n      castObj[key] = getValue(obj, key)\r\n      return castObj\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport const checkFilterType = (filter = {}) => {\r\n  if ('after' in filter && !checkType(filter.after, ['number', 'date'])) throw 'The `after` field expects a number or date'\r\n  if ('before' in filter && !checkType(filter.before, ['number', 'date'])) throw 'The `before` field expects a number or date'\r\n  if ('locations' in filter && !checkType(filter.locations, 'array')) throw 'The `locations` field expects an array'\r\n  if ('search' in filter && !checkType(filter.search, ['string', 'regexp'])) throw 'The `search` field expects a string or regular expression'\r\n  return true // indicate success\r\n}\r\n\r\n/**\r\n * This is the most efficient way to clear HTML, much faster than innerHTML.\r\n * @param {HTMLElement} element - the DOM element we want to empty\r\n */\r\nexport const clearHTML = element => {\r\n  let i = element.childNodes.length\r\n  while (i--) { element.removeChild(element.lastChild) }\r\n}\r\n\r\n/**\r\n * This helps us avoid trailing commas when mapping template literals.\r\n * @param {Array} arr - the array to iterate\r\n * @param {function} callback - the callback for each iteration; should return a string or stringifiable value\r\n */\r\nexport const mapString = (arr, callback) => arr.map(callback).join('')\r\n\r\n/**\r\n * Rounds a date to the nearest given minute\r\n * @param {Date|number|string} _date - The date to round (or anything that can be parsed as a date)\r\n * @param {number} nearestMinute - The nearest minute to round to (15 by default)\r\n */\r\nexport const roundMinutes = (_date, nearestMinute = 15) => {\r\n  const date = new Date(_date)\r\n  const roundedMinutes = Math.round(date.getMinutes() / nearestMinute) * nearestMinute\r\n  date.setMinutes(roundedMinutes)\r\n  return date\r\n}\r\n\r\nexport const WholeNumber = num => Number(num.toFixed())\r\n\r\n/**\r\n * Gets the name of the day based on the index (typically returned by `date.getDay()`)\r\n * @param {number} idx - The index of the day of the week\r\n * @param {boolean} short - Whether to abbreviate the day names or not\r\n * @returns {string} - The name of the day of the week\r\n */\r\nexport const getDay = (idx, short = false) => {\r\n  const days = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n  ]\r\n  const shortDays = [\r\n    'Sun',\r\n    'Mon',\r\n    'Tues',\r\n    'Wed',\r\n    'Thurs',\r\n    'Fri',\r\n    'Sat',\r\n  ]\r\n  return short ? shortDays[idx] : days[idx]\r\n}\r\n\r\nexport const getDateInfo = date => ({\r\n  time: date.toLocaleTimeString('en-US', { timeStyle: 'short' }),\r\n  day: getDay(date.getDay()),\r\n  date: date.toLocaleDateString(),\r\n})\r\n\r\n/**\r\n * Generates a string representing javascript, which can be used in the\r\n * HTML templates of native web components.\r\n * \r\n * EXAMPLE:\r\n * ```js\r\n *   const open = true\r\n *   const html = `<button onclick=\"this.getRootNode().host.openDialog(${open})\">Click me</button>`\r\n * ```\r\n * \r\n * versus\r\n * \r\n * ```js\r\n *   const open = true\r\n *   const html = `<button onclick=\"${runMethod('openDialog', open)}\">Click me</button>`\r\n * ```\r\n * \r\n * @param {string} name - The name of the component method to run\r\n * @param {...*} args - The arguments to be used in the function call (objects will be converted to JSON and encoded as a URI component)\r\n * @returns {string} - A string representing JavaScript code\r\n */\r\nexport const runMethod = (name, ...args) => `this.getRootNode().host.${name}(${args.length ? `\r\n  ${[...args].map(a => getType(a) === 'object'\r\n    ? `\\`${encodeURIComponent(JSON.stringify(a))}\\`` // stringify objects to avoid [object Object] and encode to avoid double quote conflicts\r\n    : (getType(a) === 'string' ? `\\`${a}\\`` : String(a)) ) // wrap strings in quotes and send all other types without quotes\r\n  }\r\n` : 'event'})`\r\n","import { DEFAULT_GUIDE } from './constants'\r\nimport { checkType, roundMinutes, getDay } from './utilities'\r\n\r\nexport const state = {\r\n\r\n  // utilities for synchronous actions after loading state\r\n  _hasFetched: false,\r\n  get hasFetched() { return this._hasFetched },\r\n  set hasFetched(bool) {\r\n    this._hasFetched = bool\r\n    if (bool === false) return false\r\n    this.fetchQueue.forEach(resolve => resolve())\r\n    return true\r\n  },\r\n  fetchQueue: [],\r\n  waitForFetch() {\r\n    return new Promise(resolve => {\r\n      if (this.hasFetched) resolve()\r\n      else this.fetchQueue.push(resolve)\r\n    })\r\n  },\r\n\r\n  // default guide\r\n  guide: DEFAULT_GUIDE,\r\n\r\n  // get locations from events dynamically\r\n  get locations() {\r\n    const events = this.guide?.events || []\r\n    return [...events.reduce((locations, event) => {\r\n      if (!checkType(event, 'object')) return locations\r\n      if (!checkType(event.location, 'string')) return locations\r\n      locations.add(event.location)\r\n      return locations\r\n    }, new Set())]\r\n  },\r\n\r\n  // get times from events dynamically\r\n  get times() {\r\n    const events = this.guide?.events || []\r\n    const allTimes = [...events.reduce((times, event) => {\r\n      if (!checkType(event, 'object')) return times\r\n      if (!checkType(event.start, ['number', 'date'])) return times\r\n      if (!checkType(event.end, ['number', 'date'])) return times\r\n      times.add(roundMinutes(event.start))\r\n      times.add(roundMinutes(event.end))\r\n      return times\r\n    }, new Set())]\r\n    const earliestTime = new Date(Math.min(...allTimes))\r\n    const latestTime = new Date(Math.max(...allTimes))\r\n    const interval = allTimes.reduce((interval, date) => {\r\n      if (interval !== 15) {\r\n        const minutes = date.getMinutes()\r\n        if (minutes === 30) interval = 30\r\n        if (minutes === 15 || minutes === 45) interval = 15\r\n      }\r\n      return interval\r\n    }, 0)\r\n    const getTimeObject = date => ({\r\n      date,\r\n      timeString: date.toLocaleTimeString('en-US', { timeStyle: 'short' }),\r\n    })\r\n    const getFullDay = time => `${getDay(time.getDay())} ${time.toLocaleDateString()}`\r\n    let days = { [getFullDay(earliestTime)]: [getTimeObject(earliestTime)] }\r\n    let prevTime = earliestTime\r\n    while (prevTime < latestTime) {\r\n      const lastTimeInDay = Math.max(...allTimes.filter(t => t.getDate() === prevTime.getDate()))\r\n      let currentTime = null\r\n      if (lastTimeInDay === Number(prevTime)) {\r\n        currentTime = new Date(allTimes.find(time => time > prevTime))\r\n        days[getFullDay(currentTime)] = [getTimeObject(currentTime)]\r\n      } else {\r\n        currentTime = new Date(prevTime)\r\n        currentTime.setMinutes(currentTime.getMinutes() + interval)\r\n        days[getFullDay(currentTime)].push(getTimeObject(currentTime))\r\n      }\r\n      prevTime = currentTime\r\n    }\r\n    return {\r\n      days,\r\n      interval,\r\n    }\r\n  },\r\n}\r\n","import {\r\n  DEFAULT_FETCH_GUIDE,\r\n  DEFAULT_EVENT,\r\n  DEFAULT_FLOOR_PLAN,\r\n  DEFAULT_CLICKABLE_AREA,\r\n} from './constants'\r\nimport {\r\n  useCast,\r\n  checkType,\r\n  checkFilterType,\r\n  isObject,\r\n} from './utilities'\r\nimport { state } from './state'\r\n\r\nconst fetchGuide = async (fetchGuide = DEFAULT_FETCH_GUIDE) => {\r\n  const guide = await fetchGuide()\r\n  if (!isObject(guide)) throw '`fetchGuide()` must return an object'\r\n  if ('events' in guide) {\r\n    if (!checkType(guide.events, 'array')) throw 'The `events` field expects an array'\r\n    const castEvent = useCast(DEFAULT_EVENT, 'event', { start: 'date', end: 'date' })\r\n    state.guide.events = guide.events.map(castEvent)\r\n  }\r\n  if ('floorPlan' in guide) {\r\n    if (!isObject(guide.floorPlan)) throw 'The `floorPlan` field expects an object'\r\n    const castFloorPlan = useCast(DEFAULT_FLOOR_PLAN, 'floor plan')\r\n    const castClickableArea = useCast(DEFAULT_CLICKABLE_AREA, 'clickable area')\r\n    const floorPlan = castFloorPlan(guide.floorPlan)\r\n    state.guide.floorPlan = {\r\n      ...floorPlan,\r\n      clickableAreas: floorPlan.clickableAreas.map(castClickableArea),\r\n    }\r\n  }\r\n  state.hasFetched = true\r\n}\r\n\r\nconst getEvents = async (_filters = {}) => {\r\n  await state.waitForFetch()\r\n  if (!isObject(_filters)) throw '`getEvents()` expects an object in the first argument'\r\n  const { include: _include = {}, exclude: _exclude = {} } = _filters\r\n  checkFilterType(_include) // throws if invalid\r\n  checkFilterType(_exclude) // throws if invalid\r\n  const filters = {\r\n    ..._filters,\r\n    include: {\r\n      ..._include,\r\n      after: _include.after ? Number(_include.after) : 0,\r\n      before: _include.before ? Number(_include.before) : Infinity,\r\n    },\r\n    exclude: {\r\n      ..._exclude,\r\n      after: _exclude.after ? Number(_exclude.after) : Infinity,\r\n      before: _exclude.before ? Number(_exclude.before) : 0,\r\n    },\r\n  }\r\n  const { include = {}, exclude = {} } = filters\r\n  return state.guide.events.filter(event => {\r\n    \r\n    // filter within time range\r\n    if (event.start < include.after) return false\r\n    if (event.start > exclude.after) return false\r\n    if (event.end > include.before) return false\r\n    if (event.end < exclude.before) return false\r\n    \r\n    // filter by location\r\n    if ('locations' in include && !contains(include.locations, event.location)) return false\r\n    if ('locations' in exclude && contains(exclude.locations, event.location)) return false\r\n    \r\n    // filter by name\r\n    if ('search' in include && !contains(event.name, include.search)) return false\r\n    if ('search' in exclude && contains(event.name, exclude.search)) return false\r\n\r\n    // if all previous checks pass, keep this event in the array\r\n    return true\r\n  })\r\n}\r\n\r\nconst getLocations = async () => {\r\n  await state.waitForFetch()\r\n  return state.locations\r\n}\r\n\r\nconst getTimes = async () => {\r\n  await state.waitForFetch()\r\n  return state.times\r\n}\r\n\r\nconst getFloorPlan = async () => {\r\n  await waitForFetch()\r\n  return state.guide.floorPlan\r\n}\r\n\r\nexport {\r\n  fetchGuide,\r\n  getEvents,\r\n  getLocations,\r\n  getTimes,\r\n  getFloorPlan,\r\n}\r\n","export const getStyles = breakpoint => /* css */`\r\n  :host,\r\n  ::before,\r\n  ::after {\r\n    --font: inherit;\r\n    --font-cell: var(--font);\r\n    --font-header: var(--font);\r\n    --font-column-header: var(--font-header);\r\n    --font-row-header: var(--font-header);\r\n    --padding-cell: 1rem 2rem;\r\n    --padding-header: var(--padding-cell);\r\n    --padding-column-header: var(--padding-header);\r\n    --padding-row-header: var(--padding-header);\r\n    --color-background: midnightblue;\r\n    --color-cell: lightsteelblue;\r\n    --color-cell-empty: transparent;\r\n    --color-cell-content: black;\r\n    --color-header: steelblue;\r\n    --color-header-content: white;\r\n    --color-column-header: var(--color-header);\r\n    --color-column-header-content: var(--color-header-content);\r\n    --color-row-header: var(--color-header);\r\n    --color-row-header-content: var(--color-header-content);\r\n    --color-corner: var(--color-header);\r\n    --color-corner-content: var(--color-header-content);\r\n  }\r\n  .pg-table-wrapper {\r\n    overflow: auto;\r\n    max-width: 100%;\r\n    margin-bottom: 1rem;\r\n    position: relative;\r\n  }\r\n  .pg-table {\r\n    background-color: var(--color-background);\r\n    width: 100%;\r\n  }\r\n  .pg-cell-wrapper {\r\n    background-color: var(--color-cell);\r\n    font: var(--font-cell);\r\n    padding: var(--padding-cell);\r\n    text-align: center;\r\n  }\r\n  .pg-cell-wrapper--corner {\r\n    background-color: var(--color-corner);\r\n    color: var(--color-corner-content);\r\n    cursor: pointer;\r\n    width: 10em; /* columns size to the minimum width */\r\n  }\r\n  .pg-cell-wrapper--row-header {\r\n    background-color: var(--color-row-header);\r\n    color: var(--color-row-header-content);\r\n    font: var(--font-row-header);\r\n    padding: var(--padding-row-header);\r\n    text-align: right;\r\n  }\r\n  .pg-cell-wrapper--row-header,\r\n  .pg-cell-wrapper--corner {\r\n    border-right: 0.1rem solid var(--color-background);\r\n    left: 0;\r\n    position: sticky;\r\n    z-index: 1;\r\n  }\r\n  .pg-cell--data {\r\n    position: sticky;\r\n    left: 10em;\r\n    margin: auto;\r\n    width: fit-content;\r\n    z-index: 0;\r\n  }\r\n  .pg-cell--corner {\r\n    align-items: center;\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    grid-template-columns: auto auto;\r\n    justify-content: center;\r\n  }\r\n  .pg-cell-wrapper--column-header {\r\n    background-color: var(--color-column-header);\r\n    color: var(--color-column-header-content);\r\n    font: var(--font-column-header);\r\n    padding: var(--padding-column-header);\r\n  }\r\n  .pg-cell--column-header {\r\n    align-items: center;\r\n    display: flex;\r\n    gap: 1em;\r\n    justify-content: center;\r\n    min-width: 8em;\r\n  }\r\n  .pg-cell-wrapper--data {\r\n    cursor: pointer;\r\n  }\r\n  .pg-cell-wrapper--data-empty {\r\n    background-color: var(--color-cell-empty);\r\n  }\r\n  .pg-loading {\r\n    --color-loading-primary: steelblue;\r\n    --color-loading-secondary: white;\r\n    --size-loader: 5rem;\r\n    height: 10rem;\r\n    width: 100%;\r\n    position: relative;\r\n    z-index: 1;\r\n  }\r\n  .pg-loading::before,\r\n  .pg-loading::after {\r\n    bottom: 0;\r\n    border-radius: 50%;\r\n    content: '';\r\n    display: block;\r\n    left: 0;\r\n    margin: auto;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 2;\r\n  }\r\n  @keyframes spin {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(359deg); }\r\n  }\r\n  .pg-loading::before {\r\n    animation: spin 1s linear infinite;\r\n    background-image: conic-gradient(var(--color-loading-primary), var(--color-loading-secondary));\r\n    border: 0.4rem solid var(--color-loading-primary);\r\n    height: var(--size-loader);\r\n    width: var(--size-loader);\r\n    z-index: 1;\r\n  }\r\n  .pg-loading::after {\r\n    background-color: var(--color-loading-primary);\r\n    border: 0 solid;\r\n    height: calc(var(--size-loader) - 1rem);\r\n    width: calc(var(--size-loader) - 1rem);\r\n    z-index: 2;\r\n  }\r\n  .pg-more-icon {\r\n    background-color: var(--color-header);\r\n    border: 0.5em solid var(--color-header-content);\r\n    display: block;\r\n    position: relative;\r\n    vertical-align: middle;\r\n    z-index: 0;\r\n  }\r\n  .pg-more-icon,\r\n  .pg-more-icon::before,\r\n  .pg-more-icon::after {\r\n    border-radius: 50%;\r\n    height: 0.25em;\r\n    width: 0.25em;\r\n  }\r\n  .pg-more-icon::before,\r\n  .pg-more-icon::after {\r\n    background-color: var(--color-header);\r\n    border: 0 solid;\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    z-index: 1;\r\n  }\r\n  .pg-more-icon::before {\r\n    left: -0.3em;\r\n  }\r\n  .pg-more-icon::after {\r\n    right: -0.3em;\r\n  }\r\n  .pg-dialog {\r\n    background-color: var(--color-header);\r\n    bottom: 0;\r\n    border: 0 solid;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.5);\r\n    box-sizing: border-box;\r\n    color: var(--color-header-content);\r\n    height: 100%;\r\n    left: 0;\r\n    margin: auto;\r\n    max-height: 40em;\r\n    max-width: 40em;\r\n    position: fixed;\r\n    right: 0;\r\n    top: 0;\r\n    width: calc(100% - 0.5rem);\r\n    z-index: 2;\r\n  }\r\n  .pg-dialog-header {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n  }\r\n  .pg-dialog-title {\r\n    margin: 0;\r\n  }\r\n  .pg-dialog-select {\r\n    border: 0 solid;\r\n    border-radius: 0.3rem;\r\n    padding: 0.5rem;\r\n  }\r\n  .pg-dialog-close {\r\n    background-color: var(--color-header-content);\r\n    border: 0 solid;\r\n    border-radius: 50%;\r\n    color: var(--color-header);\r\n    cursor: pointer;\r\n    font-size: 1.6rem;\r\n    height: 2rem;\r\n    width: 2rem;\r\n  }\r\n  .pg-dialog-menu {\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    margin: 0 auto;\r\n    max-width: 20rem;\r\n    padding: 2rem 2rem 0;\r\n  }\r\n  .pg-dialog-menu-title {\r\n    width: max-content;\r\n    margin: 0 auto;\r\n  }\r\n  .pg-dialog-menu-item {\r\n    background-color: var(--color-cell);\r\n    border: none;\r\n    color: var(--color-cell-content);\r\n    cursor: pointer;\r\n    padding: 1rem 0.5rem;\r\n  }\r\n  .pg-dialog-menu-item--input {\r\n    cursor: text;\r\n  }\r\n  .pg-dialog-menu-special-item {\r\n    display: grid;\r\n    gap: 0.5rem;\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  .pg-dialog-body {\r\n    display: grid;\r\n    grid-template-rows: auto minmax(0, 1fr);\r\n    height: 100%;\r\n  }\r\n  .pg-dialog-content {\r\n    overflow: auto;\r\n  }\r\n  .pg-dialog-content--text-container,\r\n  .pg-dialog-footer {\r\n    background-color: var(--color-cell);\r\n    border: 0 solid;\r\n    border-radius: 0.5rem;\r\n    color: var(--color-cell-content);\r\n    margin: 2rem 0;\r\n    text-align: center;\r\n  }\r\n  .pg-dialog-content--text-container::after {\r\n    background-image: linear-gradient(transparent, var(--color-cell));\r\n    bottom: 0;\r\n    content: '';\r\n    display: block;\r\n    height: 4rem;\r\n    left: 0;\r\n    position: sticky;\r\n    width: 100%;\r\n  }\r\n  .pg-dialog-paragraph {\r\n    margin: 0;\r\n    padding: 1rem;\r\n  }\r\n  .pg-time {\r\n    display: inline-block;\r\n    font-weight: bold;\r\n  }\r\n  .pg-dialog-footer {\r\n    padding: 1rem;\r\n  }\r\n  @media (max-width: ${breakpoint}) {\r\n    .pg-cell-wrapper--column-header,\r\n    .pg-cell-wrapper--data,\r\n    .pg-cell-wrapper--data-empty {\r\n      display: none;\r\n    }\r\n    .pg-cell-wrapper--column-header-active,\r\n    .pg-cell-wrapper--data-active,\r\n    .pg-cell-wrapper--data-empty-active {\r\n      display: revert;\r\n      min-width: none;\r\n    }\r\n    .pg-cell--data {\r\n      margin: 0;\r\n    }\r\n  }\r\n`\r\n","import { WholeNumber } from '../../utilities'\r\n\r\n// converts dates to actual `Date()` objects\r\nexport const getActiveEvent = event => ({\r\n  ...event,\r\n  start: new Date(event.start),\r\n  end: new Date(event.end),\r\n})\r\n\r\n\r\n// gets all data needed for one cell, so the logic doesn't clutter the template\r\nexport const getCellData = ({ events, spanState, date, interval, _location }) => {\r\n  const event = events.find(e =>\r\n    Number(e.start) === Number(date)\r\n    && e.location === _location)\r\n  const eventName = event ? event.name : ''\r\n  const cellType = event ? 'data' : 'data-empty'\r\n  const duration = event ? WholeNumber((event.end - event.start) / 1000 / 60) : 0\r\n  const span = duration ? WholeNumber(duration / interval) : 1\r\n  const blank = !!spanState[_location]\r\n  if (blank) --spanState[_location]\r\n  else if (span > 1) spanState[_location] = span\r\n  return { eventName, cellType, span, blank, event }\r\n}\r\n","import { DEFAULT_TIMES } from '../../constants'\r\nimport { getDateInfo, mapString, roundMinutes, runMethod } from '../../utilities'\r\nimport { getCellData } from './componentUtils'\r\n\r\nconst renderByTime = ({ events, times: allTimes, locations, sortBy, activeTime, activeDay }) => {\r\n\r\n  const { days, interval } = allTimes || DEFAULT_TIMES\r\n\r\n  // this keeps colspans from previous iterations in memory\r\n  // so we can avoid adding extra table cells.\r\n  const spanState = {}\r\n\r\n  // determine how to filter times\r\n  const _times = days[activeDay]\r\n  const now = roundMinutes(Date.now(), interval)\r\n  const { day: nowDay, date: nowDate, time: nowTime } = getDateInfo(now)\r\n  const filterMap = {\r\n    now: _times.filter(({ date }) => date >= now),\r\n    nowOnly: _times.filter(({ date }) => date === now),\r\n    time: _times.filter(({ date }) => date >= activeTime),\r\n    allTime: _times,\r\n  }\r\n  const filteredTimes = filterMap[sortBy]\r\n  const times = filteredTimes.length ? filteredTimes : [{ date: now, timeString: nowTime }]\r\n  const currentDay = filteredTimes.length ? activeDay : `${nowDay} ${nowDate}`\r\n\r\n  return /* html */`\r\n    <div class=\"pg-table-wrapper\">\r\n      <table class=\"pg-table\">\r\n        <thead class=\"pg-header\">\r\n          <tr class=\"pg-row\">\r\n            <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n              <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> ${currentDay}</div>\r\n            </td>\r\n            ${mapString(times, ({ timeString }) => /* html */`\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--column-header pg-cell-wrapper--column-header-active\">\r\n                <div class=\"pg-cell pg-cell--column-header pg-cell--column-header-active\">${timeString}</div>\r\n              </th>\r\n            `)}\r\n          </tr>\r\n        </thead>\r\n        <tbody class=\"pg-body\">\r\n          ${mapString(locations, _location => /* html */`\r\n            <tr class=\"pg-row\">\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--row-header\">\r\n                <div class=\"pg-cell pg-cell--row-header\">${_location}</div>\r\n              </th>\r\n              ${mapString(times, ({ date }) => {\r\n                const { eventName, cellType, span, blank, event } = getCellData({ events, spanState, date, interval, _location })\r\n                if (blank) return '' // blank if cell from previous row occupies this space\r\n                return /* html */`\r\n                  <td class=\"pg-cell-wrapper pg-cell-wrapper--${cellType} pg-cell-wrapper--${cellType}-active\" colspan=\"${span}\" ${event ? `onclick=\"${runMethod('openEventDialog', event)}\"` : ''}>\r\n                    <div class=\"pg-cell pg-cell--${cellType} pg-cell--${cellType}-active\">${eventName}</div>\r\n                  </td>\r\n                `\r\n              })}\r\n            </tr>\r\n          `)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  `\r\n}\r\n\r\nexport default renderByTime\r\n","import { getLocations, getEvents, getTimes } from '../../exports'\r\nimport { getStyles } from './getStyles'\r\nimport { clearHTML } from '../../utilities'\r\nimport { DEFAULT_BREAKPOINT, DEFAULT_EVENT, DEFAULT_TIMES } from '../../constants'\r\nimport { getActiveEvent } from './componentUtils'\r\nimport renderSortDialog from './renderSortDialog'\r\nimport renderEventDialog from './renderEventDialog'\r\nimport renderByLocation from './renderByLocation'\r\nimport renderByTime from './renderByTime'\r\n\r\n// A native web component for the main event schedule\r\nclass ProgramGuideNative extends HTMLElement {\r\n\r\n  constructor() {\r\n\r\n    // set up basic component needs\r\n    super()\r\n    const component = this\r\n    component.root = component.attachShadow({ mode: 'open' })\r\n\r\n    // component state\r\n    component.locations = []\r\n    component.events = []\r\n    component.times = DEFAULT_TIMES\r\n    component.activeDay = ''\r\n    component.activeLocation = ''\r\n    component.activeEvent = getActiveEvent(DEFAULT_EVENT)\r\n    component.sortDialogOpen = false\r\n    component.eventDialogOpen = false\r\n    component.sortBy = 'location' // location | allTime | now | time\r\n\r\n    // render loading spinner\r\n    component.render({ loading: true })\r\n\r\n    // asynchronously get data and render table\r\n    getLocations().then(async locations => {\r\n\r\n      // set the default active location for mobile view\r\n      component.events = await getEvents()\r\n      component.times = await getTimes()\r\n      component.locations = locations\r\n      component.activeLocation = locations[0]\r\n      const { days } = component.times || DEFAULT_TIMES\r\n      component.activeDay = Object.keys(days)[0]\r\n      const { date, timeString } = days[component.activeDay][0]\r\n      component.activeTime = new Date(`${date} ${timeString}`)\r\n\r\n      // initial render\r\n      component.render()\r\n    })\r\n  }\r\n\r\n  toggleSortDialog(_bool) {\r\n    const component = this\r\n    const bool = _bool === 'true' ? true : !!_bool\r\n    component.sortDialogOpen = bool\r\n    component.render()\r\n  }\r\n\r\n  openEventDialog(encodedEvent) {\r\n    const component = this\r\n    const eventJSON = decodeURIComponent(encodedEvent)\r\n    const event = JSON.parse(eventJSON)\r\n    component.activeEvent = getActiveEvent(event)\r\n    component.eventDialogOpen = true\r\n    component.render()\r\n  }\r\n\r\n  closeEventDialog() {\r\n    const component = this\r\n    component.eventDialogOpen = false\r\n    component.render()\r\n  }\r\n\r\n  selectActiveLocation(_location) {\r\n    const component = this\r\n    component.sortBy = 'location'\r\n    component.activeLocation = _location\r\n    component.sortDialogOpen = false // close upon selection\r\n    component.render()\r\n  }\r\n\r\n  selectActiveDay(event) {\r\n    const component = this\r\n    component.activeDay = event.target.value\r\n  }\r\n\r\n  selectActiveTime(event) {\r\n    const component = this\r\n    const { activeDay } = component\r\n    const timeString = event.target.value\r\n    component.activeTime = new Date(`${activeDay} ${timeString}`)\r\n  }\r\n\r\n  selectSortBy(sortBy) {\r\n    const component = this\r\n    component.sortBy = sortBy\r\n    component.sortDialogOpen = false // close upon selection\r\n    component.render()\r\n  }\r\n\r\n  render({ loading } = {}) {\r\n    const component = this\r\n\r\n    // clear previously rendered content\r\n    clearHTML(component.root)\r\n\r\n    // get style\r\n    const { css, breakpoint } = component.dataset\r\n    const style = css || getStyles(breakpoint || DEFAULT_BREAKPOINT)\r\n\r\n    // render loading spinner if necessary\r\n    if (loading) {\r\n      const loadingTemplate = document.createElement('template')\r\n      loadingTemplate.innerHTML = /* html */`\r\n        <style>${style}</style>\r\n        <div class=\"pg-loading\"></div>\r\n      `\r\n      component.root.appendChild(loadingTemplate.content.cloneNode(true))\r\n      return true // success\r\n    }\r\n\r\n    // rewrite the template HTML\r\n    const tableTemplate = document.createElement('template')\r\n    tableTemplate.innerHTML = /* html */`\r\n      <style>${style}</style>\r\n      ${component.sortBy === 'location'\r\n        ? renderByLocation(component)\r\n        : renderByTime(component)\r\n      }\r\n      ${renderSortDialog(component)}\r\n      ${renderEventDialog(component)}\r\n    `\r\n    component.root.appendChild(tableTemplate.content.cloneNode(true))\r\n    return true // success\r\n  }\r\n}\r\n\r\nexport default ProgramGuideNative\r\n","import { DEFAULT_TIMES } from '../../constants'\r\nimport { mapString, runMethod } from '../../utilities'\r\nimport { getCellData } from './componentUtils'\r\n\r\nconst renderByLocation = ({ activeLocation, events, times: allTimes, locations, activeDay }) => {\r\n\r\n  const { days, interval } = allTimes || DEFAULT_TIMES\r\n\r\n  // this keeps rowspans from previous iterations in memory\r\n  // so we can avoid adding extra table cells.\r\n  const spanState = {}\r\n\r\n  // utility to check if the given location is active and return the class accordingly\r\n  const getActiveClass = (_location, className) => activeLocation === _location ? className : ''\r\n\r\n  // get all the times in the current day\r\n  const times = days[activeDay]\r\n\r\n  return /* html */`\r\n    <div class=\"pg-table-wrapper\">\r\n      <table class=\"pg-table\">\r\n        <thead class=\"pg-header\">\r\n          <tr class=\"pg-row\">\r\n            <td class=\"pg-cell-wrapper pg-cell-wrapper--corner\" onclick=\"${runMethod('toggleSortDialog', true)}\">\r\n              <div class=\"pg-cell pg-cell--corner\"><i class=\"pg-more-icon\"></i> ${activeDay}</div>\r\n            </td>\r\n            ${mapString(locations, _location => /* html */`\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--column-header ${getActiveClass(_location, 'pg-cell-wrapper--column-header-active')}\">\r\n                <div class=\"pg-cell pg-cell--column-header ${getActiveClass(_location, 'pg-cell--column-header-active')}\">${_location}</div>\r\n              </th>\r\n            `)}\r\n          </tr>\r\n        </thead>\r\n        <tbody class=\"pg-body\">\r\n          ${mapString(times, ({ date, timeString }) => /* html */`\r\n            <tr class=\"pg-row\">\r\n              <th class=\"pg-cell-wrapper pg-cell-wrapper--row-header\">\r\n                <div class=\"pg-cell pg-cell--row-header\">${timeString}</div>\r\n              </th>\r\n              ${mapString(locations, _location => {\r\n                const { eventName, cellType, span, blank, event } = getCellData({ events, spanState, date, interval, _location })\r\n                if (blank) return '' // blank if cell from previous row occupies this space\r\n                return /* html */`\r\n                  <td class=\"pg-cell-wrapper pg-cell-wrapper--${cellType}  ${getActiveClass(_location, `pg-cell-wrapper--${cellType}-active`)}\" rowspan=\"${span}\" ${event ? `onclick=\"${runMethod('openEventDialog', event)}\"` : ''}>\r\n                    <div class=\"pg-cell pg-cell--${cellType} ${getActiveClass(_location, `pg-cell--${cellType}-active`)}\">${eventName}</div>\r\n                  </td>\r\n                `\r\n              })}\r\n            </tr>\r\n          `)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  `\r\n}\r\n\r\nexport default renderByLocation\r\n","import { DEFAULT_BREAKPOINT, DEFAULT_TIMES } from '../../constants'\r\nimport { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderSortDialog = ({ sortDialogOpen, locations, times, activeDay, dataset }) => {\r\n\r\n  // only show location list if the columns are collapsed\r\n  const { breakpoint = DEFAULT_BREAKPOINT } = dataset\r\n  const beyondThreshold = !window.matchMedia(`(max-width: ${breakpoint})`).matches\r\n\r\n  const { days } = times || DEFAULT_TIMES\r\n\r\n  return /* html */`\r\n    <dialog class=\"pg-dialog\" ${sortDialogOpen ? 'open' : ''}>\r\n      <section class=\"pg-dialog-body\">\r\n        <header class=\"pg-dialog-header\">\r\n          <h1 class=\"pg-dialog-title\">Options</h1>\r\n          <button class=\"pg-dialog-close\" onclick=\"${runMethod('toggleSortDialog', false)}\">&times;</button>\r\n        </header>\r\n        <section class=\"pg-dialog-content\">\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Which day?</h2>\r\n            <select class=\"pg-dialog-select\" onchange=\"${runMethod('selectActiveDay')}\">\r\n              ${mapString(Object.keys(days), day => /* html */`\r\n                <option value=\"${day}\" ${day === activeDay ? 'selected' : ''}>${day}</option>\r\n              `)}\r\n            </select>\r\n          </menu>\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Time</h2>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'allTime')}\">All Time</button>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'now')}\">Right Now &amp; On</button>\r\n            <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'nowOnly')}\">Right Now Only</button>\r\n            <div class=\"pg-dialog-menu-special-item\">\r\n              <input type=\"time\" class=\"pg-dialog-menu-item pg-dialog-menu-item--input\" onchange=\"${runMethod('selectActiveTime')}\" />\r\n              <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'time')}\">&amp; On</button>\r\n            </div>\r\n          </menu>\r\n          <menu class=\"pg-dialog-menu\">\r\n            <h2 class=\"pg-dialog-menu-title\">Location</h2>\r\n            ${beyondThreshold\r\n              ? /* html */`<button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectSortBy', 'location')}\">All Locations</button>`\r\n              : mapString(locations, _location => /* html */`\r\n                <button class=\"pg-dialog-menu-item\" onclick=\"${runMethod('selectActiveLocation', _location)}\">${_location}</button>\r\n              `)\r\n            }\r\n          </menu>\r\n        </section>\r\n      </section>\r\n    </dialog>\r\n  `\r\n}\r\n\r\nexport default renderSortDialog\r\n","import { mapString, runMethod } from '../../utilities'\r\n\r\nconst renderEventDialog = ({ eventDialogOpen, activeEvent }) => /* html */`\r\n  <dialog class=\"pg-dialog\" ${eventDialogOpen ? 'open' : ''}>\r\n    <article class=\"pg-dialog-body\">\r\n      <header class=\"pg-dialog-header\">\r\n        <h1 class=\"pg-dialog-title\">${activeEvent.name}</h1>\r\n        <button class=\"pg-dialog-close\" onclick=\"${runMethod('closeEventDialog')}\">&times;</button>\r\n      </header>\r\n      <section class=\"pg-dialog-content pg-dialog-content--text-container\">\r\n        ${mapString(activeEvent.description.split(/\\n/), paragraph => /* html */`\r\n          <p class=\"pg-dialog-paragraph\">${paragraph}</p>\r\n        `)}\r\n      </section>\r\n      <footer class=\"pg-dialog-footer\">\r\n        <time datetime=\"${activeEvent.start.toISOString()}\" class=\"pg-time pg-time--start\">\r\n          ${activeEvent.start.toLocaleTimeString('en-US', { timeStyle: 'short' })}\r\n        </time>\r\n        to\r\n        <time datetime=\"${activeEvent.end.toISOString()}\" class=\"pg-time pg-time--end\">\r\n          ${activeEvent.end.toLocaleTimeString('en-US', { timeStyle: 'short' })}\r\n        </time>\r\n        <br/>\r\n        @ ${activeEvent.location}\r\n      </footer>\r\n    </article>\r\n  </dialog>\r\n`\r\n\r\nexport default renderEventDialog\r\n","import * as Exports from '../lib/exports'\r\nimport * as Components from '../lib/uiComponents'\r\n\r\nexport default {\r\n  ...Exports,\r\n  Components,\r\n}\r\n"],"names":["DEFAULT_FLOOR_PLAN","title","imageSrc","clickableAreas","DEFAULT_GUIDE","events","floorPlan","DEFAULT_FETCH_GUIDE","Promise","resolve","NOW","Date","now","DEFAULT_EVENT","start","end","location","name","description","DEFAULT_CLICKABLE_AREA","shape","coords","href","alt","DEFAULT_TIMES","days","interval","DEFAULT_BREAKPOINT","NOOP","getType","val","constructor","toLowerCase","checkType","type","validString","validArray","every","t","some","isObject","obj","useFallback","fallbackObj","onFallback","_altTypes","key","fallbackValue","valid","value","empty","altTypes","altTypesArr","mismatch","useCast","getValue","status","console","warn","Object","keys","reduce","castObj","checkFilterType","filter","after","before","locations","search","mapString","arr","callback","map","join","roundMinutes","_date","nearestMinute","date","roundedMinutes","Math","round","getMinutes","setMinutes","WholeNumber","num","Number","toFixed","getDay","idx","short","runMethod","args","length","a","encodeURIComponent","JSON","stringify","String","state","_hasFetched","hasFetched","this","bool","fetchQueue","forEach","waitForFetch","push","guide","event","add","Set","times","allTimes","earliestTime","min","latestTime","max","minutes","getTimeObject","timeString","toLocaleTimeString","timeStyle","getFullDay","time","toLocaleDateString","prevTime","currentTime","getDate","find","getEvents","async","_filters","include","_include","exclude","_exclude","filters","Infinity","contains","getLocations","getTimes","fetchGuide","castEvent","castFloorPlan","castClickableArea","getActiveEvent","getCellData","spanState","_location","e","eventName","cellType","duration","span","blank","renderByTime","sortBy","activeTime","activeDay","_times","day","nowDay","nowDate","nowTime","filterMap","nowOnly","allTime","filteredTimes","currentDay","ProgramGuideNative","HTMLElement","super","component","root","attachShadow","mode","activeLocation","activeEvent","sortDialogOpen","eventDialogOpen","render","loading","then","toggleSortDialog","_bool","openEventDialog","encodedEvent","eventJSON","decodeURIComponent","parse","closeEventDialog","selectActiveLocation","selectActiveDay","target","selectActiveTime","selectSortBy","element","i","childNodes","removeChild","lastChild","clearHTML","css","breakpoint","dataset","style","getStyles","loadingTemplate","document","createElement","innerHTML","appendChild","content","cloneNode","tableTemplate","getActiveClass","className","renderByLocation","beyondThreshold","window","matchMedia","matches","renderSortDialog","split","paragraph","toISOString","renderEventDialog","Exports","Components"],"mappings":"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"}