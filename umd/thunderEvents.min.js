!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).ThunderEvents=r()}(this,(function(){"use strict";const e={title:"Venue",imageSrc:"",clickableAreas:[]},r={events:[],floorPlan:e},n=()=>Promise.resolve(r),t=Date.now(),a={start:t,end:t+36e5,location:"(none)",name:"(none)"},l={shape:"rect",coords:[],href:"#",alt:""},o=()=>{},c=e=>null===e?"null":"object"==typeof e?e.constructor.name.toLowerCase():typeof e,d=(e,r)=>{const n="string"===c(r),t="array"===c(r)&&r.every((e=>"string"===c(e)));if(!n&&!t)throw"`checkType()` expects either a string or array of strings in the second argument";return n?c(e)===r:t?r.some((r=>c(e)===r)):void 0},s=e=>d(e,"object"),p=(e,r=o,n={})=>{if(!s(e))throw"`useFallback()` expects an object in the first argument";if(!d(r,"function"))throw"`useFallback()` expects a function in the second argument";if(!s(n))throw"`useFallback()` expects an object in the third argument";return(t,a)=>{const l=e[a],o=s(t),p=o?t[a]:null,i=d(p,["undefined","null"]);const h=c(p),g=n[a],u=d(g,"array")?g:d(g,"string")?[g]:[],f=h!==c(l)&&!u.some((e=>e===h));if(!o||i||f){return r(o?i?"empty":"mismatch":"invalid",a),l}return p}},i=(e,r="object",n={})=>{if(!s(e))throw"You may only cast to custom object types";return t=>{if(!s(t))return e;const a=p(e,((n,a)=>{"invalid"===n?console.warn(`The provided ${r} is not a valid object.`):"mismatch"===n?console.warn(`The \`${a}\` field expected type \`${c(e[a])}\` but got \`${c(t[a])}\`.`):"empty"===n&&console.warn(`The provided ${r} did not have the \`${a}\` field.`)}),n);return Object.keys(e).reduce(((e,r)=>(e[r]=a(t,r),e)),{})}},h=(e={})=>{if("after"in e&&!d(e.after,["number","date"]))throw"The `after` field expects a number or date";if("before"in e&&!d(e.before,["number","date"]))throw"The `before` field expects a number or date";if("locations"in e&&!d(e.locations,"array"))throw"The `locations` field expects an array";if("search"in e&&!d(e.search,["string","regexp"]))throw"The `search` field expects a string or regular expression";return!0},g={_hasFetched:!1,get hasFetched(){return this._hasFetched},set hasFetched(e){return this._hasFetched=e,!1!==e&&(this.fetchQueue.forEach((e=>e())),!0)},fetchQueue:[],waitForFetch(){return new Promise((e=>{this.hasFetched?e():this.fetchQueue.push(e)}))},guide:r,get locations(){return[...(this.guide?.events||[]).reduce(((e,r)=>d(r,"object")&&d(r.location,"string")?(e.add(r.location),e):e),new Set)]},get times(){return[...(this.guide?.events||[]).reduce(((e,r)=>d(r,"object")&&d(r.start,["number","date"])?(d(r.end,["number","date"]),e):e),new Set)]}},u=async(e={})=>{if(!s(e))throw"`getEvents()` expects an object in the first argument";const{include:r={},exclude:n={}}=e;h(r),h(n);const t={...e,include:{...r,after:r.after?Number(r.after):0,before:r.before?Number(r.before):1/0},exclude:n},{include:a={},exclude:l={}}=t;return g.guide.events.filter((e=>!(e.start<a.after)&&(!(e.start>l.after)&&(!(e.end>a.before)&&(!(e.end<l.before)&&(!("locations"in a&&!contains(a.locations,e.location))&&((!("locations"in l)||!contains(l.locations,e.location))&&(!("search"in a&&!contains(e.name,a.search))&&((!("search"in l)||!contains(e.name,l.search))&&void 0)))))))))},f=async()=>(await g.waitForFetch(),g.locations);var w=Object.freeze({__proto__:null,fetchGuide:async(r=n)=>{const t=await r();if(!s(t))throw"`fetchGuide()` must return an object";if("events"in t){if(!d(t.events,"array"))throw"The `events` field expects an array";const e=i(a,"event",{start:"date",end:"date"});g.guide.events=t.events.map(e)}if("floorPlan"in t){if(!s(t.floorPlan))throw"The `floorPlan` field expects an object";const r=i(e,"floor plan"),n=i(l,"clickable area"),a=r(t.floorPlan);g.guide.floorPlan={...a,clickableAreas:a.clickableAreas.map(n)}}g.hasFetched=!0},getEvents:u,getLocations:f,getFloorPlan:async()=>(await waitForFetch(),g.guide.floorPlan)});class v extends HTMLElement{constructor(){super();const e=this,r=this.template=document.createElement("template"),n=this.style=`\n      <style>\n        ${e.dataset.css||"\n          .pg-table {\n            --font: sans-serif 1.5rem;\n            --font-cell: var(--font);\n            --font-header: var(--font);\n            --font-column-header: var(--font-header);\n            --font-row-header: var(--font-header);\n            --padding-cell: 1rem 2rem;\n            --padding-header: var(--padding-cell);\n            --padding-column-header: var(--padding-header);\n            --padding-row-header: var(--padding-header);\n            --color-background: midnightblue;\n            --color-cell: lightsteelblue;\n            --color-cell-empty: transparent;\n            --color-cell-content: black;\n            --color-header: steelblue;\n            --color-header-content: white;\n            --color-column-header: var(--color-header);\n            --color-column-header-content: var(--color-header-content);\n            --color-row-header: var(--color-header);\n            --color-row-header-content: var(--color-header-content);\n            --color-corner: var(--color-header);\n            background-color: var(--color-background);\n          }\n          .pg-cell-wrapper {\n            background-color: var(--color-cell);\n            font: var(--font-cell);\n            padding: var(--padding-cell);\n            text-align: center;\n          }\n          .pg-cell-wrapper--corner {\n            background-color: var(--color-corner);\n          }\n          .pg-cell-wrapper--row-header {\n            background-color: var(--color-row-header);\n            color: var(--color-row-header-content);\n            font: var(--font-row-header);\n            padding: var(--padding-row-header);\n          }\n          .pg-cell-wrapper--column-header {\n            background-color: var(--color-column-header);\n            color: var(--color-column-header-content);\n            font: var(--font-column-header);\n            padding: var(--padding-column-header);\n          }\n          .pg-cell-wrapper--data-empty {\n            background-color: var(--color-cell-empty);\n          }\n        "}\n      </style>\n    `;r.innerHTML=`\n      ${n}\n      <div class="loading"></div>\n    `,e.root=e.attachShadow({mode:"open"}),e.root.appendChild(r.content.cloneNode(!0))}async connectedCallback(){const e=await f();await u(),this.template.innerHTML=`\n      ${this.style}\n      <table class="pg-table">\n        <thead class="pg-header">\n          <tr class="pg-row">\n            <td class="pg-cell-wrapper pg-cell-wrapper--corner">\n              <div class="pg-cell pg-cell--corner"></div>\n            </td>\n            ${e.map((e=>`\n              <th class="pg-cell-wrapper pg-cell-wrapper--column-header">\n                <div class="pg-cell pg-cell--column-header">${e}</div>\n              </th>\n            `))}\n          </tr>\n        </thead>\n        <tbody class="pg-body">\n          <tr class="pg-row">\n            <th class="pg-cell-wrapper pg-cell-wrapper--row-header">\n              <div class="pg-cell pg-cell--row-header">12:00 PM</div>\n            </th>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data" rowspan="2">\n              <div class="pg-cell pg-cell--data">Event 1</div>\n            </td>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data">\n              <div class="pg-cell pg-cell--data">Event 5</div>\n            </td>\n          </tr>\n          <tr class="pg-row">\n            <th class="pg-cell-wrapper pg-cell-wrapper--row-header">\n              <div class="pg-cell pg-cell--row-header">1:00 PM</div>\n            </th>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data">\n              <div class="pg-cell pg-cell--data">Event 6</div>\n            </td>\n          </tr>\n          <tr class="pg-row">\n            <th class="pg-cell-wrapper pg-cell-wrapper--row-header">\n              <div class="pg-cell pg-cell--row-header">2:00 PM</div>\n            </th>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data pg-cell-wrapper--data-empty">\n              <div class="pg-cell pg-cell--data pg-cell--data-empty"></div>\n            </td>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data">\n              <div class="pg-cell pg-cell--data">Event 7</div>\n            </td>\n          </tr>\n          <tr class="pg-row">\n            <th class="pg-cell-wrapper pg-cell-wrapper--row-header">\n              <div class="pg-cell pg-cell--row-header">3:00 PM</div>\n            </th>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data">\n              <div class="pg-cell pg-cell--data">Event 4</div>\n            </td>\n            <td class="pg-cell-wrapper pg-cell-wrapper--data">\n              <div class="pg-cell pg-cell--data">Event 8</div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    `}}return{...w,Components:Object.freeze({__proto__:null,ProgramGuideNative:v})}}));